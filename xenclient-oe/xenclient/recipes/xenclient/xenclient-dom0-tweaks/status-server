#!/bin/bash
#
# Copyright (c) 2014 Citrix Systems, Inc.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

RED="[01;31m"
GREEN="[01;32m"
YELLOW="[01;33m"
BLUE="[01;34m"
PURPLE="[01;35m"
END="[0m"

PORT="5000"
SERVE_DIR="/storage/status-report/serve"

# optional arg: status report
if [ "$#" = "1" ] ; then
    export REPORT="$1"
else
    # scan for the most recent status report:
    export REPORT="$(ls -1t /storage/status-report/*.tar.bz2 2>/dev/null | head -1)"
fi
if [ -z "${REPORT}" ] || [ ! -r "${REPORT}" ] ; then
    echo "No such status report: ${REPORT}">&2
    exit 1
fi

WIRED_IP_ADDRESS="$(ifconfig brbridged 2>/dev/null| sed -ne 's/^.*inet addr:\([^ ]*\) .*$/\1/p')"
WIFI_IP_ADDRESS="$(ifconfig wlan0 2>/dev/null| sed -ne 's/^.*inet addr:\([^ ]*\) .*$/\1/p')"

WIRED_IN_VM_IP="$(ifconfig brshared 2>/dev/null| sed -ne 's/^.*inet addr:\([^ ]*\) .*$/\1/p')"
WIFI_IN_VM_IP="$(ifconfig brwireless 2>/dev/null| sed -ne 's/^.*inet addr:\([^ ]*\) .*$/\1/p')"

################################################################################
# Display the URL(s) that the report can be downloaded from:

# export here ensures that subprocesses can access the full url:
export REDIRECT_FILE="$(basename ${REPORT})"
export REDIRECT_SUFFIX="/${REDIRECT_FILE}"
export REDIRECT_PORT="8080"

echo -e "\nServing status report:\n${GREEN}    ${REPORT}${END}\n"

if [ ! -z "${WIRED_IP_ADDRESS}" ] || [ ! -z "${WIFI_IP_ADDRESS}" ] ; then
    echo  -e "Available for download ${PURPLE}onto another machine${END} at:\n"
    [ -z "${WIRED_IP_ADDRESS}" ] || echo "(wired)    ${BLUE}http://${WIRED_IP_ADDRESS}:${PORT}/${END}"
    [ -z "${WIFI_IP_ADDRESS}" ]  || echo "(wifi)     ${BLUE}http://${WIFI_IP_ADDRESS}:${PORT}/${END}"
    echo
fi

if [ ! -z "${WIRED_IP_ADDRESS}" ] || [ ! -z "${WIFI_IP_ADDRESS}" ] ; then
    echo  -e "Available for download ${PURPLE}to VMs on this machine${END} at:\n"
    [ -z "${WIRED_IN_VM_IP}" ] || echo "(wired)    ${BLUE}http://${WIRED_IN_VM_IP}:${PORT}/${END}"
    [ -z "${WIFI_IN_VM_IP}" ]  || echo "(wifi)     ${BLUE}http://${WIFI_IN_VM_IP}:${PORT}/${END}"
    echo
fi

echo -n -e "${RED}Press [Enter] after downloading or to stop this server.${END} "

################################################################################
# Run a webserver, serving the status report:

# This use of the 302 ensures that the downloaded file has
# the correct filename, and that the user doesn't have to type in
# a long URL of mostly numerals.

#GET /favicon.ico HTTP/1.1
rm -rf "${SERVE_DIR}"
mkdir -p "${SERVE_DIR}"
# Due to a bad interaction between busybox and netcat,
# SERVE_SCRIPT must be an absolute path and have a basename of 'sh'.
SERVE_SCRIPT="${SERVE_DIR}/sh"

cat >"${SERVE_SCRIPT}" <<EOF
#!/bin/bash

# This script depends on these env variables:
# REPORT="${REPORT}"
# REDIRECT_FILE="${REDIRECT_FILE}"
# REDIRECT_SUFFIX="${REDIRECT_SUFFIX}"
# REDIRECT_PORT="${REDIRECT_PORT}"
#

# Not the most sophisticated web server in the West.
do_read_input() {
    KEEP_ALIVE=1
    HOST=""
    read -n 511 INPUT
    while [ 1 ] ; do
        read -n 511 NEXT
        if echo -E "\${NEXT}" | grep -i -q "Connection: keep-alive" ; then
            KEEP_ALIVE=0
        fi
        if echo -E "\${NEXT}" | grep -i -q "^Host: " ; then
            HOST="\$(echo -E "\${NEXT}" | sed -ne 's/^[Hh][Oo][Ss][Tt]: \(.*\)\:[0-9]*.*$/\1/p')"
        fi
        if [ "x\$(echo -n -E "\${NEXT}" | sed 's///')" = "x" ] ; then
            break
        fi
    done
}

serve_file() {
        FILE_SIZE="\$(stat /\${REDIRECT_FILE} | sed -ne 's/^.* Size: \([0-9]\+\)[^0-9].*$/\1/p')"
        echo "HTTP/1.0 200 OK"
        echo "Content-type: application/octet-stream"
        echo "Content-length: \${FILE_SIZE}"
        echo
        cat "/\${REDIRECT_FILE}"
}
#######################################################

do_read_input

REDIRECT_URL="http://\${HOST}:\${REDIRECT_PORT}\${REDIRECT_SUFFIX}"

if [ "\${INPUT#GET / }" != "\${INPUT}" ] ; then
        echo "HTTP/1.1 302 Found"
        echo "Location: \${REDIRECT_URL}"
        [ \${KEEP_ALIVE} -ne 0 ] || echo "Connection: Keep-Alive"
        echo
        echo
        [ \${KEEP_ALIVE} -ne 0 ] || do_read_input
fi
if [ "\${INPUT#GET /\${REDIRECT_FILE}}" != "\${INPUT}" ] ; then
    serve_file
    sleep 5
else
    echo "HTTP/1.0 404 Not Found"
    echo "Content-type: application/text"
    echo
    echo "404 Not Found"
fi
EOF
chmod 755 "${SERVE_SCRIPT}"

################################################################################
# Prepare the chroot:
mkdir -p "${SERVE_DIR}/bin"
ln "${REPORT}" "${SERVE_DIR}/" 2>/dev/null || cp "${REPORT}" "${SERVE_DIR}/"

BINARY_LIST="bash netcat echo cat sed stat sleep grep /bin/su"
for BINARY in ${BINARY_LIST} ; do
    cp "$(which ${BINARY})" "${SERVE_DIR}/bin/"
done
# netcat requires '/bin/sh' in order to run external programs
ln "${SERVE_DIR}/bin/bash" "${SERVE_DIR}/bin/sh"

LIBRARY_LIST="$(for BINARY in ${BINARY_LIST} ; do
                ldd $(which ${BINARY}) ;
                done | sed -ne 's/^.*=>\s*\(\S\+\)\s\+\S*$/\1/p' | sort | uniq)"
LIBRARY_LIST="${LIBRARY_LIST} $(for BINARY in ${BINARY_LIST} ; do
                ldd $(which ${BINARY}) ;
                done | sed -ne 's/^\s*\(\S*\)\s*(\S*)/\1/p' | sort | uniq)"

for LIBRARY_FILE in ${LIBRARY_LIST} ; do
    mkdir -p "${SERVE_DIR}$(dirname ${LIBRARY_FILE})"
    cp "${LIBRARY_FILE}" "${SERVE_DIR}$(dirname ${LIBRARY_FILE})"
done
# su needs these libraries that ldd misses:
cp /lib/libnss_* ${SERVE_DIR}/lib/

mkdir -p "${SERVE_DIR}/etc"
for FILE in passwd passwd- group ; do
    egrep 'nobody|nogroup' /etc/${FILE} >>"${SERVE_DIR}/etc/${FILE}"
done
# create nobody's home under chroot to make su happy
mkdir -p "${SERVE_DIR}/nonexistent"

################################################################################
set_ulimits()
{
    ulimit -c 0         # zero core files
    ulimit -d 10240     # size of a process's data segment(kb)
    ulimit -f 0         # max file size, number of blocks
    ulimit -l 4         # size of locked memory (kb)
    ulimit -m 10240     # max memory size (kb)
    ulimit -n 24        # number of open files
    ulimit -u 10        # number of processes
    ulimit -v 10240     # virtual memory (kb)
    ulimit -x 4         # file locks
}
set_ulimits

################################################################################
# Exit gracefully if the user hits Enter or applies Ctrl+C

stop_webserver()
{
    exec 3>&1
    exec 2>/dev/null
    exec 1>/dev/null
    # ps afxww -o  "%p %P %r %y %x %c %a"
    PID_LIST="$(pgrep -g 0)"
    while [ $(echo "${PID_LIST}" | wc -w) -gt 1 ] ; do
        for CHILD in ${PID_LIST}  ; do
            [ "${CHILD}" -eq $$ ] || kill -9 "${CHILD}"
        done
        PID_LIST="$(pgrep -g 0)"
    done

    [ ! -e "${SERVE_SCRIPT}" ] || rm -f "${SERVE_SCRIPT}"
    [ ! -e "${SERVE_DIR}" ] || rm -rf "${SERVE_DIR}"
    echo "Stopped." >&3
    exit 0
}
trap "stop_webserver" SIGINT SIGTERM
chroot "${SERVE_DIR}" /bin/su nobody -s /bin/bash -c "netcat -l -p ${PORT} -e /$(basename ${SERVE_SCRIPT})" &
chroot "${SERVE_DIR}" /bin/su nobody -s /bin/bash -c "netcat -l -p ${REDIRECT_PORT} -e /$(basename ${SERVE_SCRIPT})" &

# This waits for Enter:
read DUMMY
trap - SIGINT SIGTERM
stop_webserver
