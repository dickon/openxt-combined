diff --git a/enums/op.in b/enums/op.in
index 65eb73c..fa9ebdc 100644
--- a/enums/op.in
+++ b/enums/op.in
@@ -21,3 +21,7 @@ exec
 may-unlink
 did-unlink
 cancel-unlink
+getxattr
+setxattr
+rmxattr
+listxattrs
diff --git a/ports/linux/guts/getxattr.c b/ports/linux/guts/getxattr.c
index fe8912d..9ab3fe1 100644
--- a/ports/linux/guts/getxattr.c
+++ b/ports/linux/guts/getxattr.c
@@ -2,16 +2,39 @@
  * Copyright (c) 2010 Wind River Systems; see
  * guts/COPYRIGHT for information.
  *
- * ssize_t getxattr(const char *pathname, const char *name, void *value, size_t size)
+ * ssize_t getxattr(const char *path, const char *name, void *value, size_t size)
  *	ssize_t rc = -1;
  */
 
-	/* suppress warnings */
-	(void) pathname;
-	(void) name;
-	(void) value;
-	(void) size;
-	errno = ENOTSUP;
+	pseudo_msg_t *msg;
+	int save_errno;
+	int len;
+	struct stat buf;
+
+	save_errno = errno;
+	rc = real_stat(path, &buf);
+	if (rc == -1)
+		return rc;
+	msg = pseudo_client_op_plain(OP_GETXATTR, 1, -1, -1, path, &buf, name);
+	if (msg->result == RESULT_ERROR) {
+		errno = ENOATTR;
+		return -1;
+	} else if (msg->result != RESULT_SUCCEED) {
+		errno = ENOMEM; // it's pretty safe error to return in case of server request failure
+		return -1;
+	}
+	len = pseudo_get_unquoted_len(msg->path);
+	if (size == 0) {
+		rc = len;
+		errno = save_errno;
+	} else if (size >= len) {
+		pseudo_unquote(value, msg->path);
+		rc = len;
+		errno = save_errno;
+	} else {
+		rc = -1;
+		errno = ERANGE;
+	}
 
 /*	return rc;
  * }
diff --git a/ports/linux/guts/lgetxattr.c b/ports/linux/guts/lgetxattr.c
index 404211f..08db06c 100644
--- a/ports/linux/guts/lgetxattr.c
+++ b/ports/linux/guts/lgetxattr.c
@@ -2,16 +2,39 @@
  * Copyright (c) 2010 Wind River Systems; see
  * guts/COPYRIGHT for information.
  *
- * ssize_t lgetxattr(const char *pathname, const char *name, void *value, size_t size)
+ * ssize_t lgetxattr(const char *path, const char *name, void *value, size_t size)
  *	ssize_t rc = -1;
  */
 
-	/* suppress warnings */
-	(void) pathname;
-	(void) name;
-	(void) value;
-	(void) size;
-	errno = ENOTSUP;
+	pseudo_msg_t *msg;
+	int save_errno;
+	int len;
+	struct stat buf;
+
+	save_errno = errno;
+	rc = real_lstat(path, &buf);
+	if (rc == -1)
+		return rc;
+	msg = pseudo_client_op_plain(OP_GETXATTR, 1, -1, -1, path, &buf, name);
+	if (msg->result == RESULT_ERROR) {
+		errno = ENOATTR;
+		return -1;
+	} else if (msg->result != RESULT_SUCCEED) {
+		errno = ENOMEM; // it's pretty safe error to return in case of server request failure
+		return -1;
+	}
+	len = pseudo_get_unquoted_len(msg->path);
+	if (size == 0) {
+		rc = len;
+		errno = save_errno;
+	} else if (size >= len) {
+		pseudo_unquote(value, msg->path);
+		rc = len;
+		errno = save_errno;
+	} else {
+		rc = -1;
+		errno = ERANGE;
+	}
 
 /*	return rc;
  * }
diff --git a/ports/linux/guts/listxattr.c b/ports/linux/guts/listxattr.c
index 1b0b5e7..dc2439c 100644
--- a/ports/linux/guts/listxattr.c
+++ b/ports/linux/guts/listxattr.c
@@ -2,15 +2,34 @@
  * Copyright (c) 2010 Wind River Systems; see
  * guts/COPYRIGHT for information.
  *
- * ssize_t listxattr(const char *pathname, char *list, size_t size)
+ * ssize_t listxattr(const char *path, char *list, size_t size)
  *	ssize_t rc = -1;
  */
 
-	/* suppress warnings */
-	(void) pathname;
-	(void) list;
-	(void) size;
-	errno = ENOTSUP;
+	pseudo_msg_t *msg;
+	int save_errno;
+	struct stat buf;
+
+	save_errno = errno;
+	rc = real_stat(path, &buf);
+	if (rc == -1)
+		return rc;
+	msg = pseudo_client_op_plain(OP_LISTXATTRS, 1, -1, -1, path, &buf);
+	if (msg->result != RESULT_SUCCEED) {
+		errno = ENOMEM; // it's pretty safe error to return in case of server request failure
+		return -1;
+	}
+	if (size == 0) {
+		rc = msg->pathlen;
+		errno = save_errno;
+	} else if (size >= msg->pathlen) {
+		memcpy(list, msg->path, msg->pathlen);
+		rc = msg->pathlen;
+		errno = save_errno;
+	} else {
+		rc = -1;
+		errno = ERANGE;
+	}
 
 /*	return rc;
  * }
diff --git a/ports/linux/guts/llistxattr.c b/ports/linux/guts/llistxattr.c
index a33f970..28490c1 100644
--- a/ports/linux/guts/llistxattr.c
+++ b/ports/linux/guts/llistxattr.c
@@ -2,15 +2,34 @@
  * Copyright (c) 2010 Wind River Systems; see
  * guts/COPYRIGHT for information.
  *
- * ssize_t llistxattr(const char *pathname, char *list, size_t size)
+ * ssize_t llistxattr(const char *path, char *list, size_t size)
  *	ssize_t rc = -1;
  */
 
-	/* suppress warnings */
-	(void) pathname;
-	(void) list;
-	(void) size;
-	errno = ENOTSUP;
+	pseudo_msg_t *msg;
+	int save_errno;
+	struct stat buf;
+
+	save_errno = errno;
+	rc = real_lstat(path, &buf);
+	if (rc == -1)
+		return rc;
+	msg = pseudo_client_op_plain(OP_LISTXATTRS, 1, -1, -1, path, &buf);
+	if (msg->result != RESULT_SUCCEED) {
+		errno = ENOMEM; // it's pretty safe error to return in case of server request failure
+		return -1;
+	}
+	if (size == 0) {
+		rc = msg->pathlen;
+		errno = save_errno;
+	} else if (size >= msg->pathlen) {
+		memcpy(list, msg->path, msg->pathlen);
+		rc = msg->pathlen;
+		errno = save_errno;
+	} else {
+		rc = -1;
+		errno = ERANGE;
+	}
 
 /*	return rc;
  * }
diff --git a/ports/linux/guts/lremovexattr.c b/ports/linux/guts/lremovexattr.c
index 38429da..d4b85f0 100644
--- a/ports/linux/guts/lremovexattr.c
+++ b/ports/linux/guts/lremovexattr.c
@@ -2,14 +2,25 @@
  * Copyright (c) 2010 Wind River Systems; see
  * guts/COPYRIGHT for information.
  *
- * int lremovexattr(const char *pathname, const char *name)
+ * int lremovexattr(const char *path, const char *name)
  *	int rc = -1;
  */
 
-	/* suppress warnings */
-	(void) pathname;
-	(void) name;
-	errno = ENOTSUP;
+	pseudo_msg_t *msg;
+	struct stat buf;
+	int save_errno;
+
+	save_errno = errno;
+	rc = real_lstat(path, &buf);
+	if (rc == -1)
+		return rc;
+	msg = pseudo_client_op_plain(OP_RMXATTR, 1, -1, -1, path, &buf, name);
+	if (msg->result != RESULT_SUCCEED) {
+		errno = ENOMEM; // it's pretty safe error to return in case of server request failure
+		return -1;
+	}
+	errno = save_errno;
+	rc = 0;
 
 /*	return rc;
  * }
diff --git a/ports/linux/guts/lsetxattr.c b/ports/linux/guts/lsetxattr.c
index 140ae8d..eaaa032 100644
--- a/ports/linux/guts/lsetxattr.c
+++ b/ports/linux/guts/lsetxattr.c
@@ -2,17 +2,36 @@
  * Copyright (c) 2010 Wind River Systems; see
  * guts/COPYRIGHT for information.
  *
- * int lsetxattr(const char *pathname, const char *name, const void *value, size_t size, int flags)
+ * int lsetxattr(const char *path, const char *name, const void *value, size_t size, int flags)
  *	int rc = -1;
  */
 
-	/* suppress warnings */
-	(void) pathname;
-	(void) name;
-	(void) value;
-	(void) size;
-	(void) flags;
-	errno = ENOTSUP;
+	//we don't handle flags (yet)...
+	pseudo_msg_t *msg;
+	int save_errno;
+	int encoded_len;
+	char *encoded_value;
+	struct stat buf;
+
+	save_errno = errno;
+	rc = real_lstat(path, &buf);
+	if (rc == -1)
+		return rc;
+	encoded_len = pseudo_get_quoted_len(value, size);
+	encoded_value = malloc(encoded_len);
+	if (encoded_value == NULL) {
+		errno = ENOMEM;
+		return -1;
+	}
+	pseudo_quote(encoded_value, value, size);
+	msg = pseudo_client_op_plain(OP_SETXATTR, 1, -1, -1, path, &buf, name, encoded_value);
+	free(encoded_value);
+	if (msg->result != RESULT_SUCCEED) {
+		errno = ENOMEM; // it's pretty safe error to return in case of server request failure
+		return -1;
+	}
+	errno = save_errno; 
+	rc = 0;
 
 /*	return rc;
  * }
diff --git a/ports/linux/guts/removexattr.c b/ports/linux/guts/removexattr.c
index cd7f486..dac072c 100644
--- a/ports/linux/guts/removexattr.c
+++ b/ports/linux/guts/removexattr.c
@@ -2,14 +2,25 @@
  * Copyright (c) 2010 Wind River Systems; see
  * guts/COPYRIGHT for information.
  *
- * int removexattr(const char *pathname, const char *name)
+ * int removexattr(const char *path, const char *name)
  *	int rc = -1;
  */
 
-	/* suppress warnings */
-	(void) pathname;
-	(void) name;
-	errno = ENOTSUP;
+	pseudo_msg_t *msg;
+	struct stat buf;
+	int save_errno;
+
+	save_errno = errno;
+	rc = real_stat(path, &buf);
+	if (rc == -1)
+		return rc;
+	msg = pseudo_client_op_plain(OP_RMXATTR, 1, -1, -1, path, &buf, name);
+	if (msg->result != RESULT_SUCCEED) {
+		errno = ENOMEM; // it's pretty safe error to return in case of server request failure
+		return -1;
+	}
+	errno = save_errno;
+	rc = 0;
 
 /*	return rc;
  * }
diff --git a/ports/linux/guts/setxattr.c b/ports/linux/guts/setxattr.c
index de2de98..d8129fa 100644
--- a/ports/linux/guts/setxattr.c
+++ b/ports/linux/guts/setxattr.c
@@ -2,17 +2,36 @@
  * Copyright (c) 2010 Wind River Systems; see
  * guts/COPYRIGHT for information.
  *
- * int setxattr(const char *pathname, const char *name, const void *value, size_t size, int flags)
+ * int setxattr(const char *path, const char *name, const void *value, size_t size, int flags)
  *	int rc = -1;
  */
 
-	/* suppress warnings */
-	(void) pathname;
-	(void) name;
-	(void) value;
-	(void) size;
-	(void) flags;
-	errno = ENOTSUP;
+	//we don't handle flags (yet)...
+	pseudo_msg_t *msg;
+	int save_errno;
+	int encoded_len;
+	char *encoded_value;
+	struct stat buf;
+
+	save_errno = errno;
+	rc = real_stat(path, &buf);
+	if (rc == -1)
+		return rc;
+	encoded_len = pseudo_get_quoted_len(value, size);
+	encoded_value = malloc(encoded_len);
+	if (encoded_value == NULL) {
+		errno = ENOMEM;
+		return -1;
+	}
+	pseudo_quote(encoded_value, value, size);
+	msg = pseudo_client_op_plain(OP_SETXATTR, 1, -1, -1, path, &buf, name, encoded_value);
+	free(encoded_value);
+	if (msg->result != RESULT_SUCCEED) {
+		errno = ENOMEM; // it's pretty safe error to return in case of server request failure
+		return -1;
+	}
+	errno = save_errno; 
+	rc = 0;
 
 /*	return rc;
  * }
diff --git a/ports/linux/wrapfuncs.in b/ports/linux/wrapfuncs.in
index 2dab39d..3d87140 100644
--- a/ports/linux/wrapfuncs.in
+++ b/ports/linux/wrapfuncs.in
@@ -10,22 +10,22 @@ int __openat_2(int dirfd, const char *path, int flags);
 int __xmknod(int ver, const char *path, mode_t mode, dev_t *dev); /* flags=AT_SYMLINK_NOFOLLOW */
 int __xmknodat(int ver, int dirfd, const char *path, mode_t mode, dev_t *dev); /* flags=AT_SYMLINK_NOFOLLOW */
 int fcntl(int fd, int cmd, ...{struct flock *lock});
+ssize_t getxattr(const char *path, const char *name, void *value, size_t size);
+ssize_t lgetxattr(const char *path, const char *name, void *value, size_t size); /* flags=AT_SYMLINK_NOFOLLOW */
+ssize_t listxattr(const char *path, char *list, size_t size);
+ssize_t llistxattr(const char *path, char *list, size_t size); /* flags=AT_SYMLINK_NOFOLLOW */
+int removexattr(const char *path, const char *name);
+int lremovexattr(const char *path, const char *name); /* flags=AT_SYMLINK_NOFOLLOW */
+int setxattr(const char *path, const char *name, const void *value, size_t size, int flags);
+int lsetxattr(const char *path, const char *name, const void *value, size_t size, int flags); /* flags=AT_SYMLINK_NOFOLLOW */
 # just so we know the inums of symlinks
 char *canonicalize_file_name(const char *filename);
 int eaccess(const char *path, int mode);
 # we use "pathname" to avoid canonicalizing paths, because these functions are
 # unimplemented
-ssize_t getxattr(const char *pathname, const char *name, void *value, size_t size);
-ssize_t lgetxattr(const char *pathname, const char *name, void *value, size_t size);
 ssize_t fgetxattr(int filedes, const char *name, void *value, size_t size);
-ssize_t listxattr(const char *pathname, char *list, size_t size);
-ssize_t llistxattr(const char *pathname, char *list, size_t size);
 ssize_t flistxattr(int filedes, char *list, size_t size);
-int setxattr(const char *pathname, const char *name, const void *value, size_t size, int flags);
-int lsetxattr(const char *pathname, const char *name, const void *value, size_t size, int flags);
 int fsetxattr(int filedes, const char *name, const void *value, size_t size, int flags);
-int removexattr(const char *pathname, const char *name);
-int lremovexattr(const char *pathname, const char *name);
 int fremovexattr(int filedes, const char *name);
 int open64(const char *path, int flags, ...{mode_t mode}); /* flags=0 */
 int openat64(int dirfd, const char *path, int flags, ...{mode_t mode}); /* flags=0 */
diff --git a/ports/unix/guts/fts_open.c b/ports/unix/guts/fts_open.c
index 8b3ce19..1a03c19 100644
--- a/ports/unix/guts/fts_open.c
+++ b/ports/unix/guts/fts_open.c
@@ -35,7 +35,8 @@
 		errno = ENOMEM;
 		rc = NULL;
 	} else {
-		rc = real_fts_open(path_argv, options, compar);
+		// enforcing FTS_NOCHDIR is mad, but otherwise pseudo goes south with cwd tracking...
+		rc = real_fts_open(path_argv, options | FTS_NOCHDIR, compar);
 	}
 	for (i = 0; i < args; ++i)
 		free(rpath_argv[i]);
diff --git a/pseudo.c b/pseudo.c
index 4ea79c5..5d43376 100644
--- a/pseudo.c
+++ b/pseudo.c
@@ -50,7 +50,7 @@ long opt_p = 0;
 char *opt_r = NULL;
 int opt_S = 0;
 
-static int pseudo_op(pseudo_msg_t *msg, const char *program, const char *tag);
+static int pseudo_op(pseudo_msg_t *msg, const char *program, const char *tag, char **return_path, int *return_path_len);
 static int pseudo_db_check(int fix);
 
 void
@@ -87,6 +87,14 @@ mkdir_p(char *path) {
 	}
 	(void) mkdir(path, 0755);
 }
+/* helper function to get n-th sring encoded in path */
+static char *get_nth_string(char *path, int n) {
+	char *result = path;
+	while (n--) {
+		result += strlen(result) + 1;
+	}
+	return result;
+}
 
 /* main server process */
 int
@@ -453,7 +461,7 @@ main(int argc, char *argv[]) {
  * sanity checks, then implements the fairly small DB changes required.
  */
 int
-pseudo_op(pseudo_msg_t *msg, const char *program, const char *tag) {
+pseudo_op(pseudo_msg_t *msg, const char *program, const char *tag, char **return_path, int *return_path_len) {
 	pseudo_msg_t msg_header;
 	pseudo_msg_t by_path = { .op = 0 }, by_ino = { .op = 0 };
 	pseudo_msg_t db_header;
@@ -461,6 +469,12 @@ pseudo_op(pseudo_msg_t *msg, const char *program, const char *tag) {
 	char *oldpath = 0;
 	int found_path = 0, found_ino = 0;
 	int prefer_ino = 0;
+	char *xattr_name;
+	char *xattr_value;
+	int result;
+
+	*return_path_len = 0;
+	*return_path = NULL;
 
 	if (!msg)
 		return 1;
@@ -841,6 +855,47 @@ pseudo_op(pseudo_msg_t *msg, const char *program, const char *tag) {
 		}
 		pdb_link_file(msg);
 		break;
+	case OP_GETXATTR:
+		if (msg->pathlen) {
+			xattr_name = get_nth_string(msg->path, 1);
+		} else {
+			xattr_name = get_nth_string(msg->path, 0);
+		}
+		pseudo_debug(2, "GETXATTR: path=%s, ino=%llu %s\n", msg->pathlen ? msg->path : "no path", msg->ino, xattr_name);
+		result = pdb_get_attr(msg, xattr_name, return_path, return_path_len);
+		if (result != 0) {
+			msg->result = RESULT_FAIL;
+		} else if (*return_path_len == 0) {
+			msg->result = RESULT_ERROR;
+		}
+		break;
+	case OP_RMXATTR:
+		if (msg->pathlen) {
+			xattr_name = get_nth_string(msg->path, 1);
+		} else {
+			xattr_name = get_nth_string(msg->path, 0);
+		}
+		pseudo_debug(2, "RMXATTR: path=%s, ino=%llu %s\n", msg->pathlen ? msg->path : "no path", msg->ino, xattr_name);
+		pdb_delete_attr(msg, xattr_name);
+		break;
+	case OP_SETXATTR:
+		if (msg->pathlen) {
+			xattr_name = get_nth_string(msg->path, 1);
+			xattr_value = get_nth_string(msg->path, 2);
+		} else {
+			xattr_name = get_nth_string(msg->path, 0);
+			xattr_value = get_nth_string(msg->path, 1);
+		}
+		pseudo_debug(2, "SETXATTR: path=%s, ino=%llu (%s, %s)\n", msg->pathlen ? msg->path : "no path", msg->ino, xattr_name, xattr_value);
+		pdb_insert_or_update_attr(msg, xattr_name, xattr_value);
+		break;
+	case OP_LISTXATTRS:
+		pseudo_debug(2, "LISTATTR: path=%s, ino=%llu\n", msg->pathlen ? msg->path : "no path", msg->ino);
+		result = pdb_list_attrs(msg,  return_path, return_path_len);
+		if (result != 0) {
+			msg->result = RESULT_FAIL;
+		}
+		break;
 	case OP_RENAME:
 		/* a rename implies renaming an existing entry... and every
 		 * database entry rooted in it, if it's a directory.
@@ -924,7 +979,9 @@ pseudo_op(pseudo_msg_t *msg, const char *program, const char *tag) {
 
 /* SHUTDOWN does not get this far, it's handled in pseudo_server.c */
 int
-pseudo_server_response(pseudo_msg_t *msg, const char *program, const char *tag) {
+pseudo_server_response(pseudo_msg_t *msg, const char *program, const char *tag, char **return_path, int *return_path_len) {
+	*return_path = NULL;
+	*return_path_len = 0;
 	switch (msg->type) {
 	case PSEUDO_MSG_PING:
 		msg->result = RESULT_SUCCEED;
@@ -933,7 +990,7 @@ pseudo_server_response(pseudo_msg_t *msg, const char *program, const char *tag)
 		return 0;
 		break;
 	case PSEUDO_MSG_OP:
-		return pseudo_op(msg, program, tag);
+		return pseudo_op(msg, program, tag, return_path, return_path_len);
 		break;
 	case PSEUDO_MSG_ACK:		/* FALLTHROUGH */
 	case PSEUDO_MSG_NAK:		/* FALLTHROUGH */
diff --git a/pseudo.h b/pseudo.h
index 297d6d8..5f0add5 100644
--- a/pseudo.h
+++ b/pseudo.h
@@ -70,6 +70,12 @@ extern void pseudo_stat64_from32(struct stat64 *, const struct stat *);
 
 extern char *pseudo_version;
 
+//quoting
+extern int pseudo_get_quoted_len(unsigned char *to_quote, int len);
+extern void pseudo_quote(unsigned char *quoted, char *to_quote, int len);
+extern int pseudo_get_unquoted_len(unsigned char *to_unquote);
+extern void pseudo_unquote(unsigned char *unquoted, unsigned char *to_unquote);
+
 #ifndef PSEUDO_BINDIR
  #define PSEUDO_BINDIR "bin"
 #endif
diff --git a/pseudo_client.c b/pseudo_client.c
index 4a30420..5385fca 100644
--- a/pseudo_client.c
+++ b/pseudo_client.c
@@ -1029,7 +1029,10 @@ base_path(int dirfd, const char *path, int leave_last) {
 pseudo_msg_t *
 pseudo_client_op_plain(pseudo_op_t op, int access, int fd, int dirfd, const char *path, const struct stat *buf, ...) {
 	char *oldpath = NULL;
+	char *arg2 = 0; //there is no real difference between oldpath and arg2, but due to oldpath fixed meaning arg2 was introduced
+	char *arg3 = 0;
 	PSEUDO_STATBUF buf64;
+	PSEUDO_STATBUF *buf_ptr;
 
 	if (op == OP_RENAME) {
 		va_list ap;
@@ -1037,11 +1040,31 @@ pseudo_client_op_plain(pseudo_op_t op, int access, int fd, int dirfd, const char
 		oldpath = va_arg(ap, char *);
 		va_end(ap);
 	}
+
+	if (op == OP_GETXATTR || op == OP_RMXATTR) {
+		va_list ap;
+		va_start(ap, buf);
+		arg2 = va_arg(ap, char *);
+		va_end(ap);
+	}
+
+	if (op == OP_SETXATTR) {
+		va_list ap;
+		va_start(ap, buf);
+		arg2 = va_arg(ap, char *);
+		arg3 = va_arg(ap, char *);
+		va_end(ap);
+	}
 	if (buf) {
 		pseudo_stat64_from32(&buf64, buf);
-		return pseudo_client_op(op, access, fd, dirfd, path, &buf64, oldpath);
+		buf_ptr = &buf64;
+	} else {
+		buf_ptr = NULL;
+	}
+	if (arg2) {
+		return pseudo_client_op(op, access, fd, dirfd, path, buf_ptr, arg2, arg3);
 	} else {
-		return pseudo_client_op(op, access, fd, dirfd, path, NULL, oldpath);
+		return pseudo_client_op(op, access, fd, dirfd, path, buf_ptr, oldpath);
 	}
 }
 #endif
@@ -1054,6 +1077,8 @@ pseudo_client_op(pseudo_op_t op, int access, int fd, int dirfd, const char *path
 	int do_request = 0;
 	char *oldpath = 0;
 	char *alloced_path = 0;
+	char *arg2 = 0; //there is no real difference between oldpath and arg2, but due to oldpath fixed meaning arg2 was introduced
+	char *arg3 = 0;
 
 	/* disable wrappers */
 	pseudo_antimagic();
@@ -1077,6 +1102,20 @@ pseudo_client_op(pseudo_op_t op, int access, int fd, int dirfd, const char *path
 			return 0;
 		}
 	}
+	if (op == OP_GETXATTR || op == OP_RMXATTR) {
+		va_list ap;
+		va_start(ap, buf);
+		arg2 = va_arg(ap, char *);
+		va_end(ap);
+	}
+
+	if (op == OP_SETXATTR) {
+		va_list ap;
+		va_start(ap, buf);
+		arg2 = va_arg(ap, char *);
+		arg3 = va_arg(ap, char *);
+		va_end(ap);
+	}
 
 	if (path) {
 		/* path fixup has to happen in the specific functions,
@@ -1105,6 +1144,30 @@ pseudo_client_op(pseudo_op_t op, int access, int fd, int dirfd, const char *path
 			alloced_path = both_paths;
 			path = alloced_path;
 			pathlen = full_len;
+		} else if(arg2) {
+			size_t full_len = strlen(arg2) + 1 + pathlen;
+			if (arg3) {
+				full_len += strlen(arg3) + 1;
+			}
+			char *all_args = malloc(full_len);
+			if (!all_args) {
+				pseudo_diag("can't allocate space for all_args.  Sorry.\n");
+				pseudo_magic();
+				return 0;
+			}
+			if(arg3) {
+				snprintf(all_args, full_len, "%.*s%c%s%c%s",
+					(int) (pathlen - 1 - strip_slash),
+					path, 0, arg2, 0, arg3);
+			} else {
+				snprintf(all_args, full_len, "%.*s%c%s",
+					(int) (pathlen - 1 - strip_slash),
+					path, 0, arg2);
+			}
+			alloced_path = all_args;
+			path = alloced_path;
+			pathlen = full_len;
+
 		} else {
 			if (strip_slash) {
 				alloced_path = strdup(path);
@@ -1236,6 +1299,10 @@ pseudo_client_op(pseudo_op_t op, int access, int fd, int dirfd, const char *path
 	case OP_DID_UNLINK:
 	case OP_CANCEL_UNLINK:
 	case OP_MAY_UNLINK:
+	case OP_GETXATTR:
+	case OP_RMXATTR:
+	case OP_SETXATTR:
+	case OP_LISTXATTRS:
 		do_request = 1;
 		break;
 	default:
diff --git a/pseudo_db.c b/pseudo_db.c
index 540a3c2..83a9cde 100644
--- a/pseudo_db.c
+++ b/pseudo_db.c
@@ -81,6 +81,18 @@ static struct sql_table {
 	    "rdev INTEGER",
 	  NULL,
 	  NULL },
+	{ "xattrs",
+	   "id INTEGER PRIMARY KEY, "
+		 "path VARCHAR, "
+		 "ino INTEGER, "
+	     "dev INTEGER, "
+		 "xattrname VARCHAR, "
+		 "xattrvalue VARCHAR, "
+		 "UNIQUE (ino, dev, xattrname), "
+		 "UNIQUE (path, xattrname)",
+	   NULL,
+	   NULL },
+
 	{ NULL, NULL, NULL, NULL },
 }, log_tables[] = {
 	{ "logs",
@@ -1250,6 +1262,209 @@ log_entry_free(log_entry *e) {
 	free(e);
 }
 
+int
+pdb_get_attr(pseudo_msg_t *msg, char *name, char **response, int *response_len) {
+	static sqlite3_stmt *select;
+	int rc;
+	char *sql = "SELECT xattrvalue FROM xattrs WHERE dev = ? AND ino = ? AND xattrname = ?;";
+	char *attrvalue;
+
+	*response_len = 0;
+	*response = NULL;
+
+	if (!file_db && get_dbs()) {
+		pseudo_diag("%s: database error.\n", __func__);
+		return 0;
+	}
+	if (!select) {
+		rc = sqlite3_prepare_v2(file_db, sql, strlen(sql), &select, NULL);
+		if (rc) {
+			dberr(file_db, "couldn't prepare SELECT statement");
+			return 1;
+		}
+	}
+	if (!msg) {
+		return 1;
+	}
+	sqlite3_bind_int(select, 1, msg->dev);
+	sqlite3_bind_int(select, 2, msg->ino);
+	sqlite3_bind_text(select, 3, name, -1, SQLITE_STATIC);
+	rc = sqlite3_step(select);
+	switch (rc) {
+	case SQLITE_ROW:
+		attrvalue = sqlite3_column_text(select, 0);
+		if(attrvalue == NULL) {
+			pseudo_diag("%s: attr query returned NULL. this shouldn't happen\n", __func__);
+			rc = 1;
+			break;
+		}
+		pseudo_debug(2, "Attr value for %s is %s\n", name, attrvalue);
+
+		*response = malloc(strlen(attrvalue) + 1);
+		if(*response == NULL) {
+			pseudo_diag("%s: could not allocate mem for response\n", __func__);
+			rc = 1;
+			break;
+		}
+		strcpy(*response, attrvalue);
+		*response_len = strlen(attrvalue) + 1;
+		rc = 0;
+		break;
+	case SQLITE_DONE:
+		//no rows found
+		rc = 0;
+		break;
+	default:
+		dberr(file_db, "get_attr: select returned neither a row nor done");
+		rc = 1;
+		break;
+	}
+	sqlite3_reset(select);
+	sqlite3_clear_bindings(select);
+	return rc;
+}
+
+int
+pdb_list_attrs(pseudo_msg_t *msg,  char **response, int *response_len) {
+	static sqlite3_stmt *statement;
+	int rc = 0;
+	char *sql = "SELECT xattrname FROM xattrs WHERE dev = ? AND ino = ?;";
+	int alloc_len = 0;
+	int exit = 0;
+
+	*response = NULL;
+	*response_len = 0;
+
+	if (!file_db && get_dbs()) {
+		pseudo_diag("%s: database error.\n", __func__);
+		return 0;
+	}
+	if (!statement) {
+		rc = sqlite3_prepare_v2(file_db, sql, strlen(sql), &statement, NULL);
+		if (rc) {
+			dberr(file_db, "couldn't prepare SELECT statement");
+			return 1;
+		}
+	}
+	if (!msg) {
+		return 1;
+	}
+	sqlite3_bind_int(statement, 1, msg->dev);
+	sqlite3_bind_int(statement, 2, msg->ino);
+	while(!exit) {
+		char *current_attr;
+		rc = sqlite3_step(statement);
+		switch (rc) {
+		case SQLITE_ROW:
+			current_attr = sqlite3_column_text(statement, 0);
+			if (current_attr == NULL ) {
+				pseudo_diag("%s: attr is null, this shouldn't happen...\n", __func__);
+				rc = 1;
+				exit = 1;
+				break;
+			}
+			
+			while (*response_len + strlen(current_attr) + 1 > alloc_len) {
+				char *tmp;
+				int newlen = alloc_len? 2*alloc_len: 512;
+				tmp = realloc(*response, newlen);
+				if (!tmp) {
+					pseudo_diag("%s: realloc failed.\n", __func__);
+					rc = 1;
+					exit = 1;
+					break;
+				}
+				*response = tmp;
+				alloc_len = newlen;
+			}
+			strcpy(*response + *response_len, current_attr);
+			*response_len += strlen(current_attr) + 1;
+			break;
+		case SQLITE_DONE:
+			rc = 0;
+			exit = 1;
+			break;
+		default:
+			dberr(file_db, "GETATTR: select returned neither a row nor done");
+			rc = 1;
+			exit = 1;
+			break;
+		}
+	}
+	if (rc != 0 && *response) {
+		free(*response);
+		*response = NULL;
+		*response_len = 0;
+	}
+	sqlite3_reset(statement);
+	sqlite3_clear_bindings(statement);
+	return rc;
+}
+
+int
+pdb_delete_attr(pseudo_msg_t *msg, char *name) {
+	static sqlite3_stmt *statement;
+	int rc;
+	char *sql = "delete from xattrs "
+			   " where xattrname == ? and ((ino == ? and dev == ?) or path == ?) ";
+
+	if(!file_db && get_dbs()) {
+		pseudo_diag("%s: database error.\n", __func__);
+		return 0;
+	}
+	if (!statement) {
+		rc = sqlite3_prepare_v2(file_db, sql, strlen(sql), &statement, NULL);
+		if (rc) {
+			dberr(file_db, "couldn't prepare delete statement");
+			return 1;
+		}
+	}
+	sqlite3_bind_text(statement, 1, name, -1, SQLITE_STATIC);
+	sqlite3_bind_int(statement, 2, msg->ino);
+	sqlite3_bind_int(statement, 3, msg->dev);
+	sqlite3_bind_text(statement, 4, msg->path, -1, SQLITE_STATIC);
+	rc = sqlite3_step(statement);
+	if (rc != SQLITE_DONE) {
+		dberr(file_db, "delete may have failed (rc %d)", rc);
+	}
+	sqlite3_reset(statement);
+	sqlite3_clear_bindings(statement);
+	return rc != SQLITE_DONE;
+}
+
+int
+pdb_insert_or_update_attr(pseudo_msg_t *msg, char *name, char *value) {
+	static sqlite3_stmt *statement;
+	int rc;
+	char *sql = "INSERT OR REPLACE INTO xattrs "
+			   " ( path, ino, dev, xattrname, xattrvalue ) "
+			   " VALUES (?, ?, ?, ?, ?);";
+
+	if(!file_db && get_dbs()) {
+		pseudo_diag("%s: database error.\n", __func__);
+		return 0;
+	}
+	if (!statement) {
+		rc = sqlite3_prepare_v2(file_db, sql, strlen(sql), &statement, NULL);
+		if (rc) {
+			dberr(file_db, "couldn't prepare INSERT OR UPDATE statement");
+			return 1;
+		}
+	}
+	sqlite3_bind_text(statement, 1, msg->path, -1, SQLITE_STATIC);
+	sqlite3_bind_int(statement, 2, msg->ino);
+	sqlite3_bind_int(statement, 3, msg->dev);
+	sqlite3_bind_text(statement, 4, name, -1, SQLITE_STATIC);
+	sqlite3_bind_text(statement, 5, value, -1, SQLITE_STATIC);
+	rc = sqlite3_step(statement);
+	if (rc != SQLITE_DONE) {
+		dberr(file_db, "insert or update may have failed (rc %d)", rc);
+	}
+	sqlite3_reset(statement);
+	sqlite3_clear_bindings(statement);
+	return rc != SQLITE_DONE;
+}
+
 /* Now for the actual file handling code! */
 
 /* pdb_link_file:  Creates a new file from msg, using the provided path
diff --git a/pseudo_db.h b/pseudo_db.h
index fe2fb12..f3d7106 100644
--- a/pseudo_db.h
+++ b/pseudo_db.h
@@ -87,3 +87,8 @@ extern log_history pdb_history(pseudo_query_t *traits, unsigned long fields, int
 extern log_entry *pdb_history_entry(log_history h);
 extern void pdb_history_free(log_history h);
 extern void log_entry_free(log_entry *);
+
+extern int pdb_get_attr(pseudo_msg_t *msg, char *name, char **response, int *response_len);
+extern int pdb_list_attrs(pseudo_msg_t *msg,  char **response, int *response_len);
+extern int pdb_delete_attr(pseudo_msg_t *msg, char *name);
+int pdb_insert_or_update_attr(pseudo_msg_t *msg, char *name, char *value);
diff --git a/pseudo_server.c b/pseudo_server.c
index f241242..4e2afe1 100644
--- a/pseudo_server.c
+++ b/pseudo_server.c
@@ -259,6 +259,8 @@ static int
 serve_client(int i) {
 	pseudo_msg_t *in;
 	int rc;
+	char *pseudo_server_response_path = NULL;
+	int pseudo_server_response_path_len;
 
 	pseudo_debug(2, "message from client %d [%d:%s - %s] fd %d\n",
 		i, (int) clients[i].pid,
@@ -303,15 +305,15 @@ serve_client(int i) {
 		 * pseudo_server_response.
 		 */
 		if (in->type != PSEUDO_MSG_SHUTDOWN) {
-			if (pseudo_server_response(in, clients[i].program, clients[i].tag)) {
+			if (pseudo_server_response(in, clients[i].program, clients[i].tag, &pseudo_server_response_path, &pseudo_server_response_path_len)) {
 				in->type = PSEUDO_MSG_NAK;
 			} else {
 				in->type = PSEUDO_MSG_ACK;
 				pseudo_debug(4, "response: %d (%s)\n",
 					in->result, pseudo_res_name(in->result));
 			}
-			/* no path in response */
-			in->pathlen = 0;
+			in->pathlen = pseudo_server_response_path_len;
+			response_path = pseudo_server_response_path;
 			in->client = i;
 		} else {
 			/* the server's listen fd is "a client", and
@@ -343,7 +345,7 @@ serve_client(int i) {
 				die_peacefully = 1;
 			}
 		}
-		if ((rc = pseudo_msg_send(clients[i].fd, in, -1, response_path)) != 0)
+		if ((rc = pseudo_msg_send(clients[i].fd, in, in->pathlen, response_path)) != 0)
 			pseudo_debug(1, "failed to send response to client %d [%d]: %d (%s)\n",
 				i, (int) clients[i].pid, rc, strerror(errno));
 		rc = in->op;
diff --git a/pseudo_server.h b/pseudo_server.h
index 5c595ea..3964358 100644
--- a/pseudo_server.h
+++ b/pseudo_server.h
@@ -18,6 +18,6 @@
  *
  */
 extern int pseudo_server_start(int);
-extern int pseudo_server_response(pseudo_msg_t *msg, const char *program, const char *tag);
+extern int pseudo_server_response(pseudo_msg_t *msg, const char *program, const char *tag, char **return_path, int *return_path_len);
 extern int pseudo_server_timeout;
 extern int opt_l;
diff --git a/pseudo_util.c b/pseudo_util.c
index d4aab07..92d347d 100644
--- a/pseudo_util.c
+++ b/pseudo_util.c
@@ -1426,3 +1426,74 @@ pseudo_stat64_from32(struct stat64 *buf64, const struct stat *buf) {
 	buf64->st_mtime = buf->st_mtime;
 	buf64->st_ctime = buf->st_ctime;
 }
+
+
+/* it's simpler to pass variable length arbitrary byte stream and then store it in a database encoded and null terminated */
+/* also this implementation assumes that data are encoded properly, if they are not, it may fail badly */
+
+static int pseudo_needs_quoting(unsigned char c) {
+	if ((c == 0x20) || (c >= 33) && (c <= 126) && (c != 61)) {
+		return 0;
+	}
+	return 1;
+}
+int pseudo_get_quoted_len(unsigned char *to_quote, int len) {
+	int i;
+	int result = len;
+	for(i=0; i<len; ++i) {
+		if (pseudo_needs_quoting(to_quote[i])) {
+			result += 2;
+		}
+	}
+	result ++; // null terminated
+	return result;
+}
+
+void pseudo_quote(unsigned char *quoted, char *to_quote, int len) {
+	int i;
+	char hexbuf[3];
+	for (i=0; i<len; ++i) {
+		if (pseudo_needs_quoting(to_quote[i])) {
+			*quoted = '=';
+			quoted++;
+			snprintf(hexbuf, 3, "%02x", (int)to_quote[i]);
+			strcpy(quoted, hexbuf);
+			quoted += 2;
+		} else {
+			*quoted = to_quote[i];
+			quoted++;
+		}
+	}
+	*quoted = 0;
+		
+}
+
+int pseudo_get_unquoted_len(unsigned char *to_unquote) {
+	int len = 0;
+	while(*to_unquote) {
+		if(*to_unquote == '=') {
+			len--;
+		} else {
+			len ++;
+		}
+		to_unquote++;
+	}
+	return len;
+}
+
+void pseudo_unquote(unsigned char *unquoted, unsigned char *to_unquote) {
+	char hexbuf[3];
+	while(*to_unquote) {
+		if(*to_unquote == '=') {
+			to_unquote++;	
+			strncpy(hexbuf, to_unquote, 2);
+			*unquoted = (unsigned char)strtol(hexbuf, NULL, 16);
+			unquoted++;
+			to_unquote += 2;
+		} else {
+			*unquoted = *to_unquote;
+			unquoted++;
+			to_unquote++;
+		}
+	}
+}
diff --git a/pseudo_wrappers.c b/pseudo_wrappers.c
index f11f172..d52a864 100644
--- a/pseudo_wrappers.c
+++ b/pseudo_wrappers.c
@@ -35,6 +35,7 @@
 #include <dlfcn.h>
 
 /* used for various specific function arguments */
+#include <attr/xattr.h>
 #include <dirent.h>
 #include <fts.h>
 #include <ftw.h>
