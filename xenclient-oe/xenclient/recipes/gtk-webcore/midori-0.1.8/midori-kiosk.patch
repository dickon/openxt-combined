diff --git a/midori/main.c b/midori/main.c
index 6ed70b6..77e2cbf 100644
--- a/midori/main.c
+++ b/midori/main.c
@@ -632,65 +632,7 @@ midori_history_initialize (KatzeArray*  array,
                            const gchar* filename,
                            GError**     error)
 {
-    sqlite3* db;
-    KatzeItem* item;
-    gint i;
-    gboolean has_day;
-
-    has_day = FALSE;
-
-    if ((db = db_open (filename, error)) == NULL)
-        return db;
-
-    if (!db_exec (db,
-                  "CREATE TABLE IF NOT EXISTS "
-                  "history(uri text, title text, date integer, day integer)",
-                  error))
-        return NULL;
-
-    if (!db_exec_callback (db,
-                           "PRAGMA table_info(history)",
-                           midori_history_test_day_column,
-                           &has_day, error))
-        return NULL;
-
-    if (!has_day)
-    {
-        if (!db_exec (db,
-                      "BEGIN TRANSACTION;"
-                      "CREATE TEMPORARY TABLE backup (uri text, title text, date integer);"
-                      "INSERT INTO backup SELECT uri,title,date FROM history;"
-                      "DROP TABLE history;"
-                      "CREATE TABLE history (uri text, title text, date integer, day integer);"
-                      "INSERT INTO history SELECT uri,title,date,"
-                      "julianday(date(date,'unixepoch','start of day','+1 day'))"
-                      " - julianday('0001-01-01','start of day')"
-                      "FROM backup;"
-                      "DROP TABLE backup;"
-                      "COMMIT;",
-                      error))
-        return NULL;
-    }
-
-    if (!db_exec_callback (db,
-                           "SELECT uri, title, date, day FROM history "
-                           "ORDER BY date ASC",
-                           midori_history_add_items,
-                           array,
-                           error))
-        return NULL;
-
-    i = 0;
-    while ((item = katze_array_get_nth_item (array, i++)))
-    {
-        g_signal_connect_after (item, "add-item",
-            G_CALLBACK (midori_history_add_item_cb), db);
-        g_signal_connect (item, "remove-item",
-            G_CALLBACK (midori_history_remove_item_cb), db);
-        g_signal_connect (item, "clear",
-            G_CALLBACK (midori_history_clear_before_cb), db);
-    }
-    return db;
+    return NULL;
 }
 
 static void
diff --git a/midori/midori-browser.c b/midori/midori-browser.c
index f03a525..078713e 100644
--- a/midori/midori-browser.c
+++ b/midori/midori-browser.c
@@ -267,71 +267,42 @@ _midori_browser_update_interface (MidoriBrowser* browser)
 
     _action_set_sensitive (browser, "Reload", can_reload && !loading);
     _action_set_sensitive (browser, "Stop", can_reload && loading);
-    _action_set_sensitive (browser, "Back",
-        midori_view_can_go_back (MIDORI_VIEW (view)));
-    _action_set_sensitive (browser, "Forward",
-        midori_view_can_go_forward (MIDORI_VIEW (view)));
-
-    gtk_action_set_visible (_action_by_name (browser, "AddSpeedDial"),
-        browser->speed_dial_in_new_tabs && !midori_view_is_blank (MIDORI_VIEW (view)));
+    _action_set_sensitive (browser, "Back", 0);
+    _action_set_sensitive (browser, "Forward", 0);
+    gtk_action_set_visible (_action_by_name (browser, "AddSpeedDial"), 0);
     /* Currently views that don't support source, don't support
        saving either. If that changes, we need to think of something. */
-    _action_set_sensitive (browser, "SaveAs",
-        midori_view_can_view_source (MIDORI_VIEW (view)));
-    _action_set_sensitive (browser, "Print",
-        midori_view_can_print (MIDORI_VIEW (view)));
-    _action_set_sensitive (browser, "ZoomIn",
-        midori_view_can_zoom_in (MIDORI_VIEW (view)));
-    _action_set_sensitive (browser, "ZoomOut",
-        midori_view_can_zoom_out (MIDORI_VIEW (view)));
-    _action_set_sensitive (browser, "ZoomNormal",
-        midori_view_get_zoom_level (MIDORI_VIEW (view)) != 1.0f);
-    _action_set_sensitive (browser, "Encoding",
-        midori_browser_view_can_set_encoding (MIDORI_VIEW (view)));
-    _action_set_sensitive (browser, "SourceView",
-        midori_view_can_view_source (MIDORI_VIEW (view)));
-    _action_set_sensitive (browser, "Find",
-        midori_view_can_find (MIDORI_VIEW (view)));
-    _action_set_sensitive (browser, "FindNext",
-        midori_view_can_find (MIDORI_VIEW (view)));
-    _action_set_sensitive (browser, "FindPrevious",
-        midori_view_can_find (MIDORI_VIEW (view)));
-    gtk_widget_set_sensitive (GTK_WIDGET (browser->find_highlight),
-        midori_view_can_find (MIDORI_VIEW (view)));
+    _action_set_sensitive (browser, "SaveAs", 0);
+    _action_set_sensitive (browser, "Print", 0);
+    _action_set_sensitive (browser, "ZoomIn", 0);
+    _action_set_sensitive (browser, "ZoomOut", 0);
+    _action_set_sensitive (browser, "ZoomNormal", 0);
+    _action_set_sensitive (browser, "Encoding", 0);
+    _action_set_sensitive (browser, "SourceView", 0);
+    _action_set_sensitive (browser, "Find", 0);
+    _action_set_sensitive (browser, "FindNext", 0);
+    _action_set_sensitive (browser, "FindPrevious", 0);
+    gtk_widget_set_sensitive (GTK_WIDGET (browser->find_highlight), 0);
+
+    gtk_widget_hide (browser->navigationbar);
+    gtk_widget_hide (browser->progressbar);
+    gtk_widget_set_sensitive (browser->throbber, FALSE);
 
     action = gtk_action_group_get_action (browser->action_group, "ReloadStop");
     if (!loading)
     {
-        gtk_widget_set_sensitive (browser->throbber, FALSE);
         g_object_set (action,
                       "stock-id", GTK_STOCK_REFRESH,
                       "tooltip", _("Reload the current page"),
                       "sensitive", can_reload, NULL);
-        gtk_widget_hide (browser->progressbar);
-        if (!browser->show_navigationbar && !browser->show_statusbar)
-            gtk_widget_hide (browser->navigationbar);
     }
     else
     {
-        gtk_widget_set_sensitive (browser->throbber, TRUE);
+        gtk_widget_set_sensitive (browser->throbber, FALSE);
         g_object_set (action,
                       "stock-id", GTK_STOCK_STOP,
                       "tooltip", _("Stop loading the current page"), NULL);
-        if (!browser->progress_in_location || !GTK_WIDGET_VISIBLE (browser->navigationbar))
-            gtk_widget_show (browser->progressbar);
-        if (!GTK_WIDGET_VISIBLE (browser->statusbar) &&
-            !GTK_WIDGET_VISIBLE (browser->navigationbar) &&
-            browser->progress_in_location)
-            gtk_widget_show (browser->navigationbar);
-        if (browser->progress_in_location)
-        {
-            action = _action_by_name (browser, "Location");
-            midori_location_action_set_progress (MIDORI_LOCATION_ACTION (action),
-                midori_view_get_progress (MIDORI_VIEW (view)));
-        }
     }
-    katze_throbber_set_animated (KATZE_THROBBER (browser->throbber), loading);
-
     action = _action_by_name (browser, "Location");
     if (g_object_get_data (G_OBJECT (view), "news-feeds"))
         midori_location_action_set_secondary_icon (
@@ -398,34 +369,6 @@ static void
 _midori_browser_update_progress (MidoriBrowser* browser,
                                  MidoriView*    view)
 {
-    MidoriLocationAction* action;
-    gdouble progress;
-    gchar* message;
-
-    action = MIDORI_LOCATION_ACTION (_action_by_name (browser, "Location"));
-    progress = midori_view_get_progress (view);
-    /* When we are finished, we don't want to *see* progress anymore */
-    if (midori_view_get_load_status (view) == MIDORI_LOAD_FINISHED)
-        progress = 0.0;
-    if (progress > 0.0)
-    {
-        gtk_progress_bar_set_fraction (GTK_PROGRESS_BAR (browser->progressbar),
-                                       progress);
-        message = g_strdup_printf (_("%d%% loaded"), (gint)(progress * 100));
-        gtk_progress_bar_set_text (GTK_PROGRESS_BAR (browser->progressbar),
-                                   message);
-        g_free (message);
-        if (!browser->progress_in_location)
-            progress = 0.0;
-        midori_location_action_set_progress (action, progress);
-    }
-    else
-    {
-        gtk_progress_bar_pulse (GTK_PROGRESS_BAR (browser->progressbar));
-        gtk_progress_bar_set_text (GTK_PROGRESS_BAR (browser->progressbar),
-                                   NULL);
-        midori_location_action_set_progress (action, 0.0);
-    }
 }
 
 static void
@@ -614,158 +557,6 @@ midori_browser_edit_bookmark_dialog_new (MidoriBrowser* browser,
     GtkWidget* entry_uri;
     GtkWidget* combo_folder;
 
-    if (!browser->bookmarks || !GTK_WIDGET_VISIBLE (browser))
-        return;
-
-    if (is_folder)
-        title = new_bookmark ? _("New folder") : _("Edit folder");
-    else
-        title = new_bookmark ? _("New bookmark") : _("Edit bookmark");
-    dialog = gtk_dialog_new_with_buttons (
-        title, GTK_WINDOW (browser),
-        GTK_DIALOG_DESTROY_WITH_PARENT | GTK_DIALOG_NO_SEPARATOR,
-        GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
-        new_bookmark ? GTK_STOCK_ADD : GTK_STOCK_SAVE, GTK_RESPONSE_ACCEPT,
-        NULL);
-    gtk_window_set_icon_name (GTK_WINDOW (dialog),
-        new_bookmark ? GTK_STOCK_ADD : GTK_STOCK_REMOVE);
-    gtk_container_set_border_width (GTK_CONTAINER (dialog), 5);
-    gtk_container_set_border_width (GTK_CONTAINER (GTK_DIALOG (dialog)->vbox), 5);
-    sizegroup =  gtk_size_group_new (GTK_SIZE_GROUP_HORIZONTAL);
-
-    if (!bookmark)
-    {
-        view = midori_browser_get_current_tab (browser);
-        if (is_folder)
-        {
-            bookmark = (KatzeItem*)katze_array_new (KATZE_TYPE_ARRAY);
-            katze_item_set_name (bookmark,
-                midori_view_get_display_title (MIDORI_VIEW (view)));
-        }
-        else
-            bookmark = g_object_new (KATZE_TYPE_ITEM,
-                "uri", midori_view_get_display_uri (MIDORI_VIEW (view)),
-                "name", midori_view_get_display_title (MIDORI_VIEW (view)), NULL);
-    }
-
-    hbox = gtk_hbox_new (FALSE, 8);
-    gtk_container_set_border_width (GTK_CONTAINER (hbox), 5);
-    label = gtk_label_new_with_mnemonic (_("_Title:"));
-    gtk_size_group_add_widget (sizegroup, label);
-    gtk_box_pack_start (GTK_BOX (hbox), label, FALSE, FALSE, 0);
-    entry_title = gtk_entry_new ();
-    gtk_entry_set_activates_default (GTK_ENTRY (entry_title), TRUE);
-    value = katze_item_get_name (bookmark);
-    gtk_entry_set_text (GTK_ENTRY (entry_title), value ? value : "");
-    gtk_box_pack_start (GTK_BOX (hbox), entry_title, TRUE, TRUE, 0);
-    gtk_container_add (GTK_CONTAINER (GTK_DIALOG (dialog)->vbox), hbox);
-    gtk_widget_show_all (hbox);
-
-    hbox = gtk_hbox_new (FALSE, 8);
-    gtk_container_set_border_width (GTK_CONTAINER (hbox), 5);
-    label = gtk_label_new_with_mnemonic (_("_Description:"));
-    gtk_size_group_add_widget (sizegroup, label);
-    gtk_box_pack_start (GTK_BOX (hbox), label, FALSE, FALSE, 0);
-    entry_desc = gtk_entry_new ();
-    gtk_entry_set_activates_default (GTK_ENTRY (entry_desc), TRUE);
-    if (bookmark)
-    {
-        value = katze_item_get_text (bookmark);
-        gtk_entry_set_text (GTK_ENTRY (entry_desc), value ? value : "");
-    }
-    gtk_box_pack_start (GTK_BOX (hbox), entry_desc, TRUE, TRUE, 0);
-    gtk_container_add (GTK_CONTAINER (GTK_DIALOG (dialog)->vbox), hbox);
-    gtk_widget_show_all (hbox);
-
-    entry_uri = NULL;
-    if (!KATZE_IS_ARRAY (bookmark))
-    {
-        hbox = gtk_hbox_new (FALSE, 8);
-        gtk_container_set_border_width (GTK_CONTAINER (hbox), 5);
-        label = gtk_label_new_with_mnemonic (_("_Address:"));
-        gtk_size_group_add_widget (sizegroup, label);
-        gtk_box_pack_start (GTK_BOX (hbox), label, FALSE, FALSE, 0);
-        entry_uri = gtk_entry_new ();
-        gtk_entry_set_activates_default (GTK_ENTRY (entry_uri), TRUE);
-        gtk_entry_set_text (GTK_ENTRY (entry_uri), katze_item_get_uri (bookmark));
-        gtk_box_pack_start (GTK_BOX (hbox), entry_uri, TRUE, TRUE, 0);
-        gtk_container_add (GTK_CONTAINER (GTK_DIALOG (dialog)->vbox), hbox);
-        gtk_widget_show_all (hbox);
-    }
-
-    combo_folder = NULL;
-    if (1)
-    {
-        KatzeItem* item;
-        guint i, n;
-
-        hbox = gtk_hbox_new (FALSE, 8);
-        gtk_container_set_border_width (GTK_CONTAINER (hbox), 5);
-        label = gtk_label_new_with_mnemonic (_("_Folder:"));
-        gtk_size_group_add_widget (sizegroup, label);
-        gtk_box_pack_start (GTK_BOX (hbox), label, FALSE, FALSE, 0);
-        combo_folder = gtk_combo_box_new_text ();
-        gtk_combo_box_append_text (GTK_COMBO_BOX (combo_folder),
-                                   _("Toplevel folder"));
-        gtk_combo_box_set_active (GTK_COMBO_BOX (combo_folder), 0);
-
-        i = 0;
-        n = 1;
-        while ((item = katze_array_get_nth_item (browser->bookmarks, i++)))
-        {
-            if (KATZE_IS_ARRAY (item))
-            {
-                const gchar* name = katze_item_get_name (item);
-                gtk_combo_box_append_text (GTK_COMBO_BOX (combo_folder), name);
-                if (katze_item_get_parent (bookmark) == item)
-                    gtk_combo_box_set_active (GTK_COMBO_BOX (combo_folder), n);
-                n++;
-            }
-        }
-        if (!i)
-            gtk_widget_set_sensitive (combo_folder, FALSE);
-        gtk_box_pack_start (GTK_BOX (hbox), combo_folder, TRUE, TRUE, 0);
-        gtk_container_add (GTK_CONTAINER (GTK_DIALOG (dialog)->vbox), hbox);
-        gtk_widget_show_all (hbox);
-    }
-
-    gtk_dialog_set_default_response (GTK_DIALOG (dialog), GTK_RESPONSE_ACCEPT);
-    if (gtk_dialog_run (GTK_DIALOG (dialog)) == GTK_RESPONSE_ACCEPT)
-    {
-        gchar* selected;
-        KatzeArray* folder;
-
-        katze_item_set_name (bookmark,
-            gtk_entry_get_text (GTK_ENTRY (entry_title)));
-        katze_item_set_text (bookmark,
-            gtk_entry_get_text (GTK_ENTRY (entry_desc)));
-        if (!KATZE_IS_ARRAY (bookmark))
-            katze_item_set_uri (bookmark,
-                gtk_entry_get_text (GTK_ENTRY (entry_uri)));
-
-        folder = browser->bookmarks;
-        if (1)
-        {
-            selected = gtk_combo_box_get_active_text (GTK_COMBO_BOX (combo_folder));
-            if (g_strcmp0 (selected, _("Toplevel folder")))
-            {
-                guint i = 0;
-                KatzeItem* item;
-                while ((item = katze_array_get_nth_item (browser->bookmarks, i++)))
-                    if (KATZE_IS_ARRAY (item))
-                        if (!g_strcmp0 (katze_item_get_name (item), selected))
-                        {
-                            folder = KATZE_ARRAY (item);
-                            break;
-                        }
-            }
-            g_free (selected);
-            if (!new_bookmark)
-                katze_array_remove_item (katze_item_get_parent (bookmark), bookmark);
-            katze_array_add_item (folder, bookmark);
-        }
-    }
-    gtk_widget_destroy (dialog);
 }
 
 static void
@@ -811,71 +602,6 @@ static void
 midori_browser_save_uri (MidoriBrowser* browser,
                          const gchar*   uri)
 {
-    static gchar* last_dir = NULL;
-    gboolean folder_set = FALSE;
-    GtkWidget* dialog;
-    gchar* filename;
-    gchar* dirname;
-    gchar* last_slash;
-    gchar* folder;
-
-    if (!GTK_WIDGET_VISIBLE (browser))
-        return;
-
-    dialog = gtk_file_chooser_dialog_new (
-        _("Save file as"), GTK_WINDOW (browser),
-        GTK_FILE_CHOOSER_ACTION_SAVE,
-        GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
-        GTK_STOCK_SAVE, GTK_RESPONSE_ACCEPT,
-        NULL);
-    gtk_window_set_icon_name (GTK_WINDOW (dialog), GTK_STOCK_SAVE);
-    gtk_window_set_transient_for (GTK_WINDOW (dialog), GTK_WINDOW (browser));
-
-    if (uri)
-    {
-        /* Base the start folder on the current view's uri if it is local */
-        filename = g_filename_from_uri (uri, NULL, NULL);
-        if (filename)
-        {
-            dirname = g_path_get_dirname (filename);
-            if (dirname && g_file_test (dirname, G_FILE_TEST_IS_DIR))
-            {
-                gtk_file_chooser_set_current_folder (GTK_FILE_CHOOSER (dialog), dirname);
-                folder_set = TRUE;
-            }
-
-            g_free (dirname);
-            g_free (filename);
-        }
-
-        /* Try to provide a good default filename */
-        filename = g_filename_from_uri (uri, NULL, NULL);
-        if (!filename && (last_slash = g_strrstr (uri, "/")))
-        {
-            if (last_slash[0] == '/')
-                last_slash++;
-            filename = g_strdup (last_slash);
-        }
-        else
-            filename = g_strdup (uri);
-        gtk_file_chooser_set_current_name (GTK_FILE_CHOOSER (dialog), filename);
-        g_free (filename);
-    }
-
-    if (!folder_set && last_dir && *last_dir)
-        gtk_file_chooser_set_current_folder (GTK_FILE_CHOOSER (dialog), last_dir);
-
-    if (gtk_dialog_run (GTK_DIALOG (dialog)) == GTK_RESPONSE_ACCEPT)
-    {
-        filename = gtk_file_chooser_get_filename (GTK_FILE_CHOOSER (dialog));
-        folder = gtk_file_chooser_get_current_folder (GTK_FILE_CHOOSER (dialog));
-        katze_net_load_uri (browser->net, uri, NULL,
-            (KatzeNetTransferCb)midori_browser_save_transfer_cb, filename);
-
-        g_free (last_dir);
-        last_dir = folder;
-    }
-    gtk_widget_destroy (dialog);
 }
 
 static void
@@ -969,88 +695,9 @@ midori_browser_add_speed_dial (MidoriBrowser* browser)
     g_regex_unref (reg_quotes);
     g_regex_unref (reg_others);
 
-    if (slot_id == NULL)
-    {
-        g_free (uri);
-        g_free (title);
-        return;
-    }
-
-    if ((len = g_utf8_strlen (title, -1)) > 15)
-    {
-        /**
-          * The case when a quote was escaped with a backslash and the
-          * backslash becomes the last character of the ellipsized string.
-          * This causes JSON parsing to fail.
-          * For example: "My Foo Bar \'b\..."
-          **/
-        GRegex* reg_unsafe = g_regex_new ("([\\\\]+\\.)", 0, 0, NULL);
-
-        gchar* temp;
-        gchar* ellipsized = g_malloc0 ( len + 1);
-
-        g_utf8_strncpy (ellipsized, title, 15);
-        g_free (title);
-
-        temp = g_strdup_printf ("%s...", ellipsized);
-        g_free  (ellipsized);
-
-        title = g_regex_replace_literal (reg_unsafe, temp, -1, 0, ".", 0, NULL);
-        g_free (temp);
-
-        g_regex_unref (reg_unsafe);
-    }
-
-    if ((img = midori_view_get_snapshot (MIDORI_VIEW (view), 160, 107)))
-    {
-        GRegex* regex;
-        gchar* replace;
-        gchar* file_content;
-        gchar* encoded;
-        gchar* speed_dial_body;
-        gchar* body_fname;
-        gsize sz;
-
-        body_fname = g_build_filename (sokoke_set_config_dir (NULL),
-                                       "speeddial.json", NULL);
-
-        if (g_file_get_contents (body_fname, &speed_dial_body, NULL, NULL))
-        {
-            gint i;
-
-            gdk_pixbuf_save_to_buffer (img, &file_content, &sz, "png", NULL, NULL);
-            encoded = g_base64_encode ((guchar *)file_content, sz);
-
-            replace_from = g_strdup_printf (
-                "\\{\"id\":\"%s\",\"href\":\"#\",\"title\":\"\",\"img\":\"\"\\}",
-                slot_id);
-            replace_by = g_strdup_printf (
-                "{\"id\":\"%s\",\"href\":\"%s\",\"title\":\"%s\",\"img\":\"%s\"}",
-                slot_id, uri, title, encoded);
-
-            regex = g_regex_new (replace_from, G_REGEX_MULTILINE, 0, NULL);
-            replace = g_regex_replace (regex, speed_dial_body, -1,
-                                       1, replace_by, 0, NULL);
-
-            g_file_set_contents (body_fname, replace, -1, NULL);
-
-            i = 0;
-            while ((view = gtk_notebook_get_nth_page (GTK_NOTEBOOK (
-                                                      browser->notebook), i++)))
-                if (midori_view_is_blank (MIDORI_VIEW (view)))
-                    midori_view_reload (MIDORI_VIEW (view), FALSE);
-
-            g_object_unref (img);
-            g_regex_unref (regex);
-            g_free (encoded);
-            g_free (file_content);
-            g_free (speed_dial_body);
-            g_free (replace_from);
-            g_free (replace_by);
-            g_free (replace);
-        }
-        g_free (body_fname);
-    }
+    g_free (uri);
+    g_free (title);
+    return;
 }
 
 
@@ -1937,118 +1584,54 @@ static void
 _action_window_new_activate (GtkAction*     action,
                              MidoriBrowser* browser)
 {
+#if 0
     MidoriBrowser* new_browser = g_object_new (MIDORI_TYPE_BROWSER, NULL);
     g_signal_emit (browser, signals[NEW_WINDOW], 0, new_browser);
     midori_browser_add_uri (new_browser, "");
     midori_browser_activate_action (new_browser, "Location");
+#endif
 }
 
 static void
 _action_tab_new_activate (GtkAction*     action,
                           MidoriBrowser* browser)
 {
-    gint n = midori_browser_add_uri (browser, "");
-    midori_browser_set_current_page (browser, n);
 }
 
 static void
 _action_open_activate (GtkAction*     action,
                        MidoriBrowser* browser)
 {
-    static gchar* last_dir = NULL;
-    gchar* uri = NULL;
-    gboolean folder_set = FALSE;
-    GtkWidget* dialog;
-
-    if (!GTK_WIDGET_VISIBLE (browser))
-        return;
-
-    dialog = gtk_file_chooser_dialog_new (
-        _("Open file"), GTK_WINDOW (browser),
-        GTK_FILE_CHOOSER_ACTION_OPEN,
-        GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
-        GTK_STOCK_OPEN, GTK_RESPONSE_ACCEPT,
-        NULL);
-     gtk_window_set_icon_name (GTK_WINDOW (dialog), GTK_STOCK_OPEN);
-     gtk_window_set_transient_for (GTK_WINDOW (dialog), GTK_WINDOW (browser));
-
-     /* base the start folder on the current view's uri if it is local */
-     GtkWidget* view = midori_browser_get_current_tab (browser);
-     if ((uri = (gchar*)midori_view_get_display_uri (MIDORI_VIEW (view))))
-     {
-         gchar* filename = g_filename_from_uri (uri, NULL, NULL);
-         if (filename)
-         {
-             gchar* dirname = g_path_get_dirname (filename);
-             if (dirname && g_file_test (dirname, G_FILE_TEST_IS_DIR))
-             {
-                 gtk_file_chooser_set_current_folder (GTK_FILE_CHOOSER (dialog), dirname);
-                 folder_set = TRUE;
-             }
-
-             g_free (dirname);
-             g_free (filename);
-         }
-     }
-
-     if (!folder_set && last_dir && *last_dir)
-         gtk_file_chooser_set_current_folder (GTK_FILE_CHOOSER (dialog), last_dir);
-
-     if (gtk_dialog_run (GTK_DIALOG (dialog)) == GTK_RESPONSE_ACCEPT)
-     {
-         gchar* folder;
-
-         folder = gtk_file_chooser_get_current_folder (GTK_FILE_CHOOSER (dialog));
-         uri = gtk_file_chooser_get_uri (GTK_FILE_CHOOSER (dialog));
-         midori_browser_set_current_uri (browser, uri);
-
-         g_free (last_dir);
-         last_dir = folder;
-         g_free (uri);
-     }
-    gtk_widget_destroy (dialog);
 }
 
 static void
 _action_save_as_activate (GtkAction*     action,
                           MidoriBrowser* browser)
 {
-    midori_browser_save_uri (browser, midori_browser_get_current_uri (browser));
 }
 
 static void
 _action_add_speed_dial_activate (GtkAction*     action,
                                 MidoriBrowser* browser)
 {
-    midori_browser_add_speed_dial (browser);
 }
 
 static void
 _action_tab_close_activate (GtkAction*     action,
                             MidoriBrowser* browser)
 {
-    GtkWidget* widget = midori_browser_get_current_tab (browser);
-    gtk_widget_destroy (widget);
 }
 
 static void
 _action_window_close_activate (GtkAction*     action,
                                MidoriBrowser* browser)
 {
-    gtk_widget_destroy (GTK_WIDGET (browser));
 }
 
 static void
 _action_print_activate (GtkAction*     action,
                         MidoriBrowser* browser)
 {
-    GtkWidget* view;
-
-    if (!GTK_WIDGET_VISIBLE (browser))
-        return;
-
-    if ((view = midori_browser_get_current_tab (browser)))
-        midori_view_print (MIDORI_VIEW (view));
 }
 
 static void
@@ -2173,18 +1756,6 @@ static void
 _action_find_activate (GtkAction*     action,
                        MidoriBrowser* browser)
 {
-    if (!GTK_WIDGET_VISIBLE (browser->find))
-    {
-        gtk_icon_entry_set_icon_from_stock (GTK_ICON_ENTRY (browser->find_text),
-                                            GTK_ICON_ENTRY_PRIMARY, GTK_STOCK_FIND);
-        gtk_entry_set_text (GTK_ENTRY (browser->find_text), "");
-        gtk_widget_show (GTK_WIDGET (browser->find_case));
-        gtk_widget_show (GTK_WIDGET (browser->find_highlight));
-        gtk_widget_show (GTK_WIDGET (browser->find_close));
-        gtk_widget_show (browser->find);
-    }
-
-    gtk_widget_grab_focus (GTK_WIDGET (browser->find_text));
 }
 
 static void
@@ -2586,110 +2157,36 @@ static void
 _action_preferences_activate (GtkAction*     action,
                               MidoriBrowser* browser)
 {
-    static GtkWidget* dialog = NULL;
-
-    if (!browser->settings || !GTK_WIDGET_VISIBLE (browser))
-        return;
-
-    if (!dialog)
-    {
-        dialog = midori_preferences_new (GTK_WINDOW (browser),
-                                         browser->settings);
-        g_signal_connect (dialog, "response",
-            G_CALLBACK (midori_preferences_response_help_cb), browser);
-        g_signal_connect (dialog, "destroy",
-            G_CALLBACK (gtk_widget_destroyed), &dialog);
-        gtk_widget_show (dialog);
-    }
-    else
-        gtk_window_present (GTK_WINDOW (dialog));
 }
 
 static void
 _action_menubar_activate (GtkToggleAction* action,
                           MidoriBrowser*   browser)
 {
-    gboolean active = gtk_toggle_action_get_active (action);
-    if (browser->settings)
-        g_object_set (browser->settings, "show-menubar", active, NULL);
-    #if !HAVE_HILDON
-    sokoke_widget_set_visible (browser->menubar, active);
-    if (browser->settings)
-    {
-        if (active)
-        {
-            GtkContainer* navigationbar = GTK_CONTAINER (browser->navigationbar);
-            GList* children = gtk_container_get_children (navigationbar);
-            GtkAction* menu_action = _action_by_name (browser, "CompactMenu");
-            for (; children != NULL; children = g_list_next (children))
-            {
-                GtkAction* action_;
-                action_ = gtk_widget_get_action (GTK_WIDGET (children->data));
-                if (action_ == menu_action)
-                {
-                    gtk_container_remove (navigationbar,
-                        GTK_WIDGET (children->data));
-                    _midori_browser_save_toolbar_items (browser);
-                    break;
-                }
-            }
-        }
-        else
-        {
-            GtkAction* widget_action = _action_by_name (browser, "CompactMenu");
-            GtkWidget* toolitem = gtk_action_create_tool_item (widget_action);
-            gtk_toolbar_insert (GTK_TOOLBAR (browser->navigationbar),
-                                GTK_TOOL_ITEM (toolitem), -1);
-            g_signal_connect (gtk_bin_get_child (GTK_BIN (toolitem)),
-                "button-press-event",
-                G_CALLBACK (midori_browser_toolbar_item_button_press_event_cb),
-                browser);
-            _midori_browser_save_toolbar_items (browser);
-        }
-    }
-    #endif
 }
 
 static void
 _action_navigationbar_activate (GtkToggleAction* action,
                                 MidoriBrowser*   browser)
 {
-    gboolean active = gtk_toggle_action_get_active (action);
-    if (browser->settings)
-        g_object_set (browser->settings, "show-navigationbar", active, NULL);
-    sokoke_widget_set_visible (browser->navigationbar, active);
 }
 
 static void
 _action_bookmarkbar_activate (GtkToggleAction* action,
                               MidoriBrowser*   browser)
 {
-    gboolean active = gtk_toggle_action_get_active (action);
-    if (browser->settings)
-        g_object_set (browser->settings, "show-bookmarkbar", active, NULL);
-    sokoke_widget_set_visible (browser->bookmarkbar, active);
 }
 
 static void
 _action_transferbar_activate (GtkToggleAction* action,
                               MidoriBrowser*   browser)
 {
-    gboolean active = gtk_toggle_action_get_active (action);
-    if (browser->settings)
-        g_object_set (browser->settings, "show-transferbar", active, NULL);
-    sokoke_widget_set_visible (browser->transferbar, active);
 }
 
 static void
 _action_statusbar_activate (GtkToggleAction* action,
                             MidoriBrowser*   browser)
 {
-    gboolean active = gtk_toggle_action_get_active (action);
-    if (browser->settings)
-        g_object_set (browser->settings, "show-statusbar", active, NULL);
-    #if !HAVE_HILDON
-    sokoke_widget_set_visible (browser->statusbar, active);
-    #endif
 }
 
 static void
@@ -2753,34 +2250,6 @@ _action_view_encoding_activate (GtkAction*     action,
                                 GtkAction*     current,
                                 MidoriBrowser* browser)
 {
-    GtkWidget* view = midori_browser_get_current_tab (browser);
-    if (view && midori_browser_view_can_set_encoding (MIDORI_VIEW (view)))
-    {
-        const gchar* name;
-        GtkWidget* web_view;
-
-        name = gtk_action_get_name (current);
-        web_view = gtk_bin_get_child (GTK_BIN (view));
-        if (!strcmp (name, "EncodingAutomatic"))
-            g_object_set (web_view, "custom-encoding", NULL, NULL);
-        else
-        {
-            const gchar* encoding;
-            if (!strcmp (name, "EncodingChinese"))
-                encoding = "BIG5";
-            else if (!strcmp (name, "EncodingJapanese"))
-                encoding = "SHIFT_JIS";
-            else if (!strcmp (name, "EncodingRussian"))
-                encoding = "KOI8-R";
-            else if (!strcmp (name, "EncodingUnicode"))
-                encoding = "UTF-8";
-            else if (!strcmp (name, "EncodingWestern"))
-                encoding = "ISO-8859-1";
-            else
-                g_assert_not_reached ();
-            g_object_set (web_view, "custom-encoding", encoding, NULL);
-        }
-    }
 }
 
 static gchar*
@@ -2873,130 +2342,36 @@ static void
 _action_source_view_activate (GtkAction*     action,
                               MidoriBrowser* browser)
 {
-    GtkWidget* view;
-    gchar* text_editor;
-    const gchar* uri;
-
-    if (!(view = midori_browser_get_current_tab (browser)))
-        return;
-
-    if (browser->settings)
-        g_object_get (browser->settings, "text-editor", &text_editor, NULL);
-    else
-        text_editor = NULL;
-    uri = midori_view_get_display_uri (MIDORI_VIEW (view));
-
-    if (!g_strcmp0 (text_editor, ""))
-    {
-        GFile* file = g_file_new_for_uri (uri);
-
-        gchar* content_type;
-        GAppInfo* app_info;
-        GList* files;
-        gpointer context;
-
-        #if GLIB_CHECK_VERSION (2, 18, 0)
-        content_type = g_content_type_from_mime_type ("text/plain");
-        #else
-        content_type = g_strdup ("text/plain");
-        #endif
-
-        app_info = g_app_info_get_default_for_type (content_type,
-            !g_str_has_prefix (uri, "file://"));
-        g_free (content_type);
-        files = g_list_prepend (NULL, file);
-        #if GTK_CHECK_VERSION (2, 14, 0)
-        context = gdk_app_launch_context_new ();
-        gdk_app_launch_context_set_screen (context, gtk_widget_get_screen (view));
-        gdk_app_launch_context_set_timestamp (context, gtk_get_current_event_time ());
-        #else
-        context = g_app_launch_context_new ();
-        #endif
-        if (g_app_info_launch (app_info, files, context, NULL))
-        {
-            g_object_unref (app_info);
-            g_list_free (files);
-            g_object_unref (file);
-            g_free (text_editor);
-            return;
-        }
-    }
-
-    katze_net_load_uri (browser->net, uri, NULL,
-        (KatzeNetTransferCb)midori_browser_source_transfer_cb, browser);
-    g_free (text_editor);
 }
 
 static void
 _action_fullscreen_activate (GtkAction*     action,
                              MidoriBrowser* browser)
 {
-    if (!GTK_WIDGET (browser)->window)
-        return;
-
-    GdkWindowState state = gdk_window_get_state (GTK_WIDGET (browser)->window);
-    if (state & GDK_WINDOW_STATE_FULLSCREEN)
-        gtk_window_unfullscreen (GTK_WINDOW (browser));
-    else
-        gtk_window_fullscreen (GTK_WINDOW (browser));
 }
 
 static void
 _action_back_activate (GtkAction*     action,
                        MidoriBrowser* browser)
 {
-    if (g_object_get_data (G_OBJECT (action), "midori-middle-click"))
-    {
-        g_object_set_data (G_OBJECT (action), "midori-middle-click", (void*)0);
-        return;
-    }
-
-    GtkWidget* view = midori_browser_get_current_tab (browser);
-    if (view)
-        midori_view_go_back (MIDORI_VIEW (view));
 }
 
 static void
 _action_forward_activate (GtkAction*     action,
                           MidoriBrowser* browser)
 {
-    if (g_object_get_data (G_OBJECT (action), "midori-middle-click"))
-    {
-        g_object_set_data (G_OBJECT (action), "midori-middle-click", (void*)0);
-        return;
-    }
-
-    GtkWidget* view = midori_browser_get_current_tab (browser);
-    if (view)
-        midori_view_go_forward (MIDORI_VIEW (view));
 }
 
 static void
 _action_homepage_activate (GtkAction*     action,
                            MidoriBrowser* browser)
 {
-    if (g_object_get_data (G_OBJECT (action), "midori-middle-click"))
-    {
-        g_object_set_data (G_OBJECT (action), "midori-middle-click", (void*)0);
-        return;
-    }
-
-    gchar* homepage;
-
-    if (!browser->settings)
-        return;
-
-    g_object_get (browser->settings, "homepage", &homepage, NULL);
-    midori_browser_set_current_uri (browser, homepage);
-    g_free (homepage);
 }
 
 static void
 _action_location_activate (GtkAction*     action,
                            MidoriBrowser* browser)
 {
-    if (!browser->show_navigationbar)
-        gtk_widget_show (browser->navigationbar);
 }
 
 static void
@@ -3222,26 +2597,6 @@ static void
 _action_search_activate (GtkAction*     action,
                          MidoriBrowser* browser)
 {
-    GSList* proxies = gtk_action_get_proxies (action);
-    guint i = 0;
-    GtkWidget* proxy;
-    const gchar* uri;
-    gchar* search;
-
-    while (((proxy = g_slist_nth_data (proxies, i++))))
-        if (GTK_IS_TOOL_ITEM (proxy))
-        {
-            if (!GTK_WIDGET_VISIBLE (browser->navigationbar))
-                gtk_widget_show (browser->navigationbar);
-            return;
-        }
-
-    /* Load default search engine in current tab */
-    uri = browser->location_entry_search;
-    search = sokoke_search_uri (uri ? uri : "", "");
-    midori_browser_set_current_uri (browser, search);
-    gtk_widget_grab_focus (midori_browser_get_current_tab (browser));
-    g_free (search);
 }
 
 static void
@@ -3294,24 +2649,6 @@ midori_browser_bookmark_popup_item (GtkWidget*     menu,
                                     gpointer       callback,
                                     MidoriBrowser* browser)
 {
-    const gchar* uri;
-    GtkWidget* menuitem;
-
-    uri = katze_item_get_uri (item);
-
-    menuitem = gtk_image_menu_item_new_from_stock (stock_id, NULL);
-    if (label)
-        gtk_label_set_text_with_mnemonic (GTK_LABEL (gtk_bin_get_child (
-        GTK_BIN (menuitem))), label);
-    if (!strcmp (stock_id, GTK_STOCK_EDIT))
-        gtk_widget_set_sensitive (menuitem,
-            KATZE_IS_ARRAY (item) || uri != NULL);
-    else if (!KATZE_IS_ARRAY (item) && strcmp (stock_id, GTK_STOCK_DELETE))
-        gtk_widget_set_sensitive (menuitem, uri != NULL);
-    g_object_set_data (G_OBJECT (menuitem), "KatzeItem", item);
-    g_signal_connect (menuitem, "activate", G_CALLBACK (callback), browser);
-    gtk_menu_shell_append (GTK_MENU_SHELL (menu), menuitem);
-    gtk_widget_show (menuitem);
 }
 
 static void
@@ -3420,46 +2757,12 @@ midori_browser_bookmark_popup (GtkWidget*      widget,
                                KatzeItem*      item,
                                MidoriBrowser*  browser)
 {
-    GtkWidget* menu;
-    GtkWidget* menuitem;
-
-    menu = gtk_menu_new ();
-    if (KATZE_IS_ARRAY (item))
-        midori_browser_bookmark_popup_item (menu,
-            STOCK_TAB_NEW, _("Open all in _Tabs"),
-            item, midori_browser_bookmark_open_in_tab_activate_cb, browser);
-    else
-    {
-        midori_browser_bookmark_popup_item (menu, GTK_STOCK_OPEN, NULL,
-            item, midori_browser_bookmark_open_activate_cb, browser);
-        midori_browser_bookmark_popup_item (menu,
-            STOCK_TAB_NEW, _("Open in New _Tab"),
-            item, midori_browser_bookmark_open_in_tab_activate_cb, browser);
-        midori_browser_bookmark_popup_item (menu,
-            STOCK_WINDOW_NEW, _("Open in New _Window"),
-            item, midori_browser_bookmark_open_in_window_activate_cb, browser);
-    }
-    menuitem = gtk_separator_menu_item_new ();
-    gtk_menu_shell_append (GTK_MENU_SHELL (menu), menuitem);
-    gtk_widget_show (menuitem);
-    midori_browser_bookmark_popup_item (menu, GTK_STOCK_EDIT, NULL,
-        item, midori_browser_bookmark_edit_activate_cb, browser);
-    midori_browser_bookmark_popup_item (menu, GTK_STOCK_DELETE, NULL,
-        item, midori_browser_bookmark_delete_activate_cb, browser);
-
-    sokoke_widget_popup (widget, GTK_MENU (menu),
-                         event, SOKOKE_MENU_POSITION_CURSOR);
 }
 
 static void
 midori_browser_menu_bookmarks_item_activate_cb (GtkWidget*     widget,
                                                 MidoriBrowser* browser)
 {
-    KatzeItem* item;
-
-    item = (KatzeItem*)g_object_get_data (G_OBJECT (widget), "KatzeItem");
-    midori_browser_set_current_uri (browser, katze_item_get_uri (item));
-    gtk_widget_grab_focus (midori_browser_get_current_tab (browser));
 }
 
 static gboolean
@@ -3483,84 +2786,6 @@ static gboolean
 midori_browser_menu_middle_click_on_navigation_action (MidoriBrowser* browser,
                                                        GtkAction*     action)
 {
-    const gchar* name;
-    gchar* homepage;
-
-    g_return_val_if_fail (action != NULL, FALSE);
-
-    if (!browser->settings)
-        return FALSE;
-
-    g_object_get (browser->settings, "homepage", &homepage, NULL);
-
-    name = gtk_action_get_name (action);
-
-    /* We use a trick here to implement middle click and prevent the default
-       "activate" callback from being invoked. We set "midori-middle-click"
-       as GObject data and check the value in the "activate" callback. */
-
-    if (g_str_equal (name, "Homepage"))
-    {
-        gint n;
-
-        n = midori_browser_add_uri (browser, homepage);
-        _midori_browser_set_current_page_smartly (browser, n);
-
-        g_object_set_data (G_OBJECT (action), "midori-middle-click", (void*)1);
-
-        return TRUE;
-    }
-    else if (g_str_equal (name, "Back"))
-    {
-        GtkWidget* view;
-        WebKitWebBackForwardList* back_forward_list;
-        WebKitWebHistoryItem* back_item;
-        const gchar* back_uri;
-        gint n;
-
-        view = gtk_bin_get_child (GTK_BIN (midori_browser_get_current_tab (browser)));
-
-        back_forward_list =
-            webkit_web_view_get_back_forward_list (WEBKIT_WEB_VIEW (view));
-
-        back_item = webkit_web_back_forward_list_get_back_item (back_forward_list);
-        back_uri = webkit_web_history_item_get_uri (back_item);
-
-        n = midori_browser_add_uri (browser, back_uri);
-        _midori_browser_set_current_page_smartly (browser, n);
-
-        g_object_set_data (G_OBJECT (action), "midori-middle-click", (void*)1);
-
-        return TRUE;
-    }
-    else if (g_str_equal (name, "Forward"))
-    {
-        GtkWidget *view;
-        WebKitWebBackForwardList *back_forward_list;
-        WebKitWebHistoryItem *forward_item;
-        const gchar *forward_uri;
-        gint n;
-
-        view = gtk_bin_get_child (GTK_BIN (midori_browser_get_current_tab (browser)));
-
-        back_forward_list =
-            webkit_web_view_get_back_forward_list (WEBKIT_WEB_VIEW (view));
-
-        forward_item =
-            webkit_web_back_forward_list_get_forward_item (back_forward_list);
-        forward_uri = webkit_web_history_item_get_uri (forward_item);
-
-        n = midori_browser_add_uri (browser, forward_uri);
-        _midori_browser_set_current_page_smartly (browser, n);
-
-        g_object_set_data (G_OBJECT (action), "midori-middle-click", (void*)1);
-
-        return TRUE;
-    }
-
-    g_free (homepage);
-
-    return FALSE;
 }
 
 static gboolean
@@ -3568,12 +2793,6 @@ midori_browser_menu_item_middle_click_event_cb (GtkWidget*      toolitem,
                                                 GdkEventButton* event,
                                                 MidoriBrowser*  browser)
 {
-    if (event->button == 2)
-    {
-        GtkAction* action = gtk_widget_get_action (toolitem);
-
-        return midori_browser_menu_middle_click_on_navigation_action (browser, action);
-    }
     return FALSE;
 }
 
@@ -3609,35 +2828,18 @@ static void
 _action_bookmark_add_activate (GtkAction*     action,
                                MidoriBrowser* browser)
 {
-    midori_browser_edit_bookmark_dialog_new (browser, NULL, TRUE, FALSE);
 }
 
 static void
 _action_bookmark_folder_add_activate (GtkAction*     action,
                                       MidoriBrowser* browser)
 {
-    midori_browser_edit_bookmark_dialog_new (browser, NULL, TRUE, TRUE);
 }
 
 static void
 _action_manage_search_engines_activate (GtkAction*     action,
                                         MidoriBrowser* browser)
 {
-    static GtkWidget* dialog = NULL;
-
-    if (!GTK_WIDGET_VISIBLE (browser))
-        return;
-
-    if (!dialog)
-    {
-        dialog = midori_search_action_get_dialog (
-            MIDORI_SEARCH_ACTION (_action_by_name (browser, "Search")));
-        g_signal_connect (dialog, "destroy",
-            G_CALLBACK (gtk_widget_destroyed), &dialog);
-        gtk_widget_show (dialog);
-    }
-    else
-        gtk_window_present (GTK_WINDOW (dialog));
 }
 
 static void
@@ -3716,110 +2918,18 @@ static void
 _action_clear_private_data_activate (GtkAction*     action,
                                      MidoriBrowser* browser)
 {
-    static GtkWidget* dialog = NULL;
-
-    if (!GTK_WIDGET_VISIBLE (browser))
-        return;
-
-    if (!dialog)
-    {
-        GdkScreen* screen;
-        GtkIconTheme* icon_theme;
-        GtkSizeGroup* sizegroup;
-        GtkWidget* hbox;
-        GtkWidget* alignment;
-        GtkWidget* vbox;
-        GtkWidget* icon;
-        GtkWidget* label;
-        GtkWidget* button;
-
-        gint clear_prefs = MIDORI_CLEAR_NONE;
-        g_object_get (browser->settings, "clear-private-data", &clear_prefs, NULL);
-
-        dialog = gtk_dialog_new_with_buttons (_("Clear Private Data"),
-            GTK_WINDOW (browser),
-            GTK_DIALOG_NO_SEPARATOR | GTK_DIALOG_DESTROY_WITH_PARENT,
-            GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
-            _("_Clear private data"), GTK_RESPONSE_ACCEPT, NULL);
-        gtk_window_set_skip_taskbar_hint (GTK_WINDOW (dialog), FALSE);
-        screen = gtk_widget_get_screen (GTK_WIDGET (browser));
-        if (screen)
-        {
-            icon_theme = gtk_icon_theme_get_for_screen (screen);
-            gtk_window_set_icon_name (GTK_WINDOW (dialog), GTK_STOCK_CLEAR);
-        }
-        sizegroup = gtk_size_group_new (GTK_SIZE_GROUP_HORIZONTAL);
-        hbox = gtk_hbox_new (FALSE, 4);
-        icon = gtk_image_new_from_stock (GTK_STOCK_CLEAR, GTK_ICON_SIZE_DIALOG);
-        gtk_size_group_add_widget (sizegroup, icon);
-        gtk_box_pack_start (GTK_BOX (hbox), icon, FALSE, FALSE, 0);
-        label = gtk_label_new (_("Clear the following data:"));
-        gtk_box_pack_start (GTK_BOX (hbox), label, FALSE, TRUE, 0);
-        gtk_box_pack_start (GTK_BOX (GTK_DIALOG (dialog)->vbox), hbox, FALSE, FALSE, 0);
-        hbox = gtk_hbox_new (FALSE, 4);
-        icon = gtk_image_new ();
-        gtk_size_group_add_widget (sizegroup, icon);
-        gtk_box_pack_start (GTK_BOX (hbox), icon, FALSE, FALSE, 0);
-        vbox = gtk_vbox_new (TRUE, 4);
-        alignment = gtk_alignment_new (0, 0, 1, 1);
-        gtk_alignment_set_padding (GTK_ALIGNMENT (alignment), 0, 6, 12, 0);
-        button = gtk_check_button_new_with_mnemonic (_("History"));
-        if ((clear_prefs & MIDORI_CLEAR_HISTORY) == MIDORI_CLEAR_HISTORY)
-            gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button), TRUE);
-        g_object_set_data (G_OBJECT (dialog), "history", button);
-        gtk_box_pack_start (GTK_BOX (vbox), button, TRUE, TRUE, 0);
-        button = gtk_check_button_new_with_mnemonic (_("Cookies"));
-        if ((clear_prefs & MIDORI_CLEAR_COOKIES) == MIDORI_CLEAR_COOKIES)
-            gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button), TRUE);
-        g_object_set_data (G_OBJECT (dialog), "cookies", button);
-        gtk_box_pack_start (GTK_BOX (vbox), button, TRUE, TRUE, 0);
-        button = gtk_check_button_new_with_mnemonic (_("'Flash' Cookies"));
-        if ((clear_prefs & MIDORI_CLEAR_FLASH_COOKIES) == MIDORI_CLEAR_FLASH_COOKIES)
-            gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button), TRUE);
-        g_object_set_data (G_OBJECT (dialog), "flash-cookies", button);
-        gtk_box_pack_start (GTK_BOX (vbox), button, TRUE, TRUE, 0);
-        button = gtk_check_button_new_with_mnemonic (_("Website icons"));
-        if ((clear_prefs & MIDORI_CLEAR_WEBSITE_ICONS) == MIDORI_CLEAR_WEBSITE_ICONS)
-            gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button), TRUE);
-        g_object_set_data (G_OBJECT (dialog), "website-icons", button);
-        gtk_box_pack_start (GTK_BOX (vbox), button, TRUE, TRUE, 0);
-        button = gtk_check_button_new_with_mnemonic (_("_Closed Tabs and Windows"));
-        if ((clear_prefs & MIDORI_CLEAR_TRASH) == MIDORI_CLEAR_TRASH)
-            gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button), TRUE);
-        g_object_set_data (G_OBJECT (dialog), "trash", button);
-        gtk_box_pack_start (GTK_BOX (vbox), button, TRUE, TRUE, 0);
-        gtk_container_add (GTK_CONTAINER (alignment), vbox);
-        gtk_box_pack_start (GTK_BOX (hbox), alignment, TRUE, TRUE, 0);
-        gtk_box_pack_start (GTK_BOX (GTK_DIALOG (dialog)->vbox), hbox, FALSE, FALSE, 0);
-        gtk_widget_show_all (GTK_DIALOG (dialog)->vbox);
-
-        g_signal_connect (dialog, "response",
-            G_CALLBACK (midori_browser_clear_private_data_response_cb), browser);
-        g_signal_connect (dialog, "destroy",
-            G_CALLBACK (gtk_widget_destroyed), &dialog);
-        gtk_widget_show (dialog);
-    }
-    else
-        gtk_window_present (GTK_WINDOW (dialog));
 }
 
 static void
 _action_tab_previous_activate (GtkAction*     action,
                                MidoriBrowser* browser)
 {
-    gint n = gtk_notebook_get_current_page (GTK_NOTEBOOK (browser->notebook));
-    gtk_notebook_set_current_page (GTK_NOTEBOOK (browser->notebook), n - 1);
 }
 
 static void
 _action_tab_next_activate (GtkAction*     action,
                            MidoriBrowser* browser)
 {
-    /* Advance one tab or jump to the first one if we are at the last one */
-    gint n = gtk_notebook_get_current_page (GTK_NOTEBOOK (browser->notebook));
-    if (n == gtk_notebook_get_n_pages (GTK_NOTEBOOK (browser->notebook)) - 1)
-        n = -1;
-    gtk_notebook_set_current_page (GTK_NOTEBOOK (browser->notebook), n + 1);
 }
 
 static const gchar* credits_authors[] = {
@@ -3882,42 +2992,12 @@ static void
 _action_help_link_activate (GtkAction*     action,
                             MidoriBrowser* browser)
 {
-    const gchar* action_name;
-    const gchar* uri;
-    gint n;
-
-    action_name = gtk_action_get_name (action);
-    if  (!strncmp ("HelpContents", action_name, 12))
-    {
-        #ifdef DOCDIR
-        uri = "file://" DOCDIR "/midori/user/midori.html";
-        if (!g_file_test (DOCDIR "/midori/user/midori.html", G_FILE_TEST_EXISTS))
-        #endif
-            uri = "error:nodocs " DOCDIR "/midori/user/midori.html";
-    }
-    else if  (!strncmp ("HelpFAQ", action_name, 7))
-        uri = "http://wiki.xfce.org/_export/xhtml/midori_faq";
-    else if  (!strncmp ("HelpBugs", action_name, 8))
-        uri = "http://www.twotoasts.de/bugs/";
-    else
-        uri = NULL;
-
-    if (uri)
-    {
-        n = midori_browser_add_uri (browser, uri);
-        midori_browser_set_current_page (browser, n);
-    }
-
 }
 
 static void
 _action_panel_activate (GtkToggleAction* action,
                         MidoriBrowser*   browser)
 {
-    gboolean active = gtk_toggle_action_get_active (action);
-    if (browser->settings)
-        g_object_set (browser->settings, "show-panel", active, NULL);
-    sokoke_widget_set_visible (browser->panel, active);
 }
 
 static gboolean
@@ -4080,20 +3160,6 @@ static void
 _action_undo_tab_close_activate (GtkAction*     action,
                                  MidoriBrowser* browser)
 {
-    guint last;
-    KatzeItem* item;
-    guint n;
-
-    if (!browser->trash)
-        return;
-
-    /* Reopen the most recent trash item */
-    last = katze_array_get_length (browser->trash) - 1;
-    item = katze_array_get_nth_item (browser->trash, last);
-    n = midori_browser_add_item (browser, item);
-    midori_browser_set_current_page (browser, n);
-    katze_array_remove_item (browser->trash, item);
-    _midori_browser_update_actions (browser);
 }
 
 static void
