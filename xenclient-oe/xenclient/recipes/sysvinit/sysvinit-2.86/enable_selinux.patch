diff -ru sysvinit-2.86.orig/src/init.c sysvinit-2.86/src/init.c
--- sysvinit-2.86.orig/src/init.c	2010-11-26 12:52:58.000000000 +0000
+++ sysvinit-2.86/src/init.c	2010-11-26 12:54:14.000000000 +0000
@@ -9,6 +9,7 @@
  */
 #define VERSION "2.86"
 #define DATE    "31-Jul-2004"
+#define WITH_SELINUX 1
 /*
  *		This file is part of the sysvinit suite,
  *		Copyright 1991-2004 Miquel van Smoorenburg.
@@ -42,6 +43,12 @@
 #include <stdarg.h>
 #include <sys/syslog.h>
 #include <sys/time.h>
+#include <sys/mman.h>
+#include <sys/mount.h>
+
+#ifdef WITH_SELINUX
+#  include <selinux/selinux.h>
+#endif
 
 #ifdef __i386__
 #  if (__GLIBC__ >= 2)
@@ -2599,6 +2606,9 @@
 	char			*p;
 	int			f;
 	int			isinit;
+#ifdef WITH_SELINUX
+	int			enforce;
+#endif
 
 	/* Get my own name */
 	if ((p = strrchr(argv[0], '/')) != NULL)
@@ -2662,6 +2672,23 @@
 		maxproclen += strlen(argv[f]) + 1;
 	}
 
+#ifdef WITH_SELINUX
+	if (getenv("SELINUX_INIT") == NULL) {
+	  if (is_selinux_enabled() != 1) {
+	    if (selinux_init_load_policy(&enforce) == 0) {
+	      putenv("SELINUX_INIT=yes");
+	      execv(argv[0], argv);
+	    } else {
+	      if (enforce > 0) {
+		fprintf(stderr, "Unable to load SELinux Policy. SELinux is in enforcing mode. Halting now.\n");
+		exit(1);
+	      }
+	    }
+	  } else
+	    fprintf(stderr, "SELinux is not enabled\n");
+	}
+#endif
+
 	/* Start booting. */
 	argv0 = argv[0];
 	argv[1] = NULL;
diff -urN sysvinit-2.86.orig/src/sulogin.c sysvinit-2.86/src/sulogin.c
--- sysvinit-2.86.orig/src/sulogin.c	2004-07-30 07:40:28.000000000 -0400
+++ sysvinit-2.86/src/sulogin.c	2005-01-03 20:30:48.746751992 -0500
@@ -27,7 +27,10 @@
 #if defined(__GLIBC__)
 #  include <crypt.h>
 #endif
-
+#ifdef WITH_SELINUX
+#include <selinux/selinux.h>
+#include <selinux/get_context_list.h>
+#endif
 #define CHECK_DES	1
 #define CHECK_MD5	1
 
@@ -335,6 +338,16 @@
 	signal(SIGINT, SIG_DFL);
 	signal(SIGTSTP, SIG_DFL);
 	signal(SIGQUIT, SIG_DFL);
+#ifdef WITH_SELINUX
+	if (is_selinux_enabled > 0) {
+	  security_context_t* contextlist=NULL;
+	  if (get_ordered_context_list("root", 0, &contextlist) > 0) {
+	    if (setexeccon(contextlist[0]) != 0) 
+	      fprintf(stderr, "setexeccon faile\n");
+	    freeconary(contextlist);
+	  }
+	}
+#endif
 	execl(sushell, shell, NULL);
 	perror(sushell);
 
