diff -ru a/src/dnsmasq.h b/src/dnsmasq.h
--- a/src/dnsmasq.h	2012-08-24 13:52:44.000000000 +0100
+++ b/src/dnsmasq.h	2012-08-24 13:54:28.000000000 +0100
@@ -349,6 +349,7 @@
   struct in_addr netmask; /* only valid for IPv4 */
   int tftp_ok, mtu;
   char *name;
+  int idx;
   struct irec *next;
 };
 
@@ -646,7 +647,7 @@
   struct cond_domain *cond_domain;
   char *runfile; 
   char *lease_change_command;
-  struct iname *if_names, *if_addrs, *if_except, *dhcp_except;
+  struct iname *if_names, *if_addrs, *if_except, *dhcp_except, *dnsout_names;
   struct bogus_addr *bogus_addr;
   struct server *servers;
   int log_fac; /* log facility */
Only in b/src: network.
diff -ru a/src/network.c b/src/network.c
--- a/src/network.c	2012-08-24 13:52:44.000000000 +0100
+++ b/src/network.c	2012-08-24 14:17:07.000000000 +0100
@@ -225,6 +225,7 @@
       iface->mtu = mtu;
       if ((iface->name = whine_malloc(strlen(ifr.ifr_name)+1)))
 	strcpy(iface->name, ifr.ifr_name);
+      iface->idx = if_index;
       iface->next = *irecp;
       *irecp = iface;
       return 1;
@@ -530,6 +531,12 @@
 int random_sock(int family)
 {
   int fd;
+  struct ifreq ifr;
+  struct iname *ifn;
+
+  memset(&ifr, 0, sizeof (ifr));
+  if ((ifn = daemon->dnsout_names))
+      strncpy(ifr.ifr_name, ifn->name, sizeof (ifr.ifr_name));
 
   if ((fd = socket(family, SOCK_DGRAM, 0)) != -1)
     {
@@ -568,6 +575,13 @@
 #endif
 	      }
 #endif
+            if (ifr.ifr_name[0])
+            {
+                printf("Use interface %s\n", ifr.ifr_name);
+                if (setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE,
+                               (void *)&ifr, sizeof (ifr)) < 0)
+                    break;
+            }
 	    
 	    if (bind(fd, (struct sockaddr *)&addr, sa_len(&addr)) == 0)
 	      return fd;
diff -ru a/src/option.c b/src/option.c
--- a/src/option.c	2012-08-24 13:52:44.000000000 +0100
+++ b/src/option.c	2012-08-24 14:06:11.000000000 +0100
@@ -108,6 +108,7 @@
 #define LOPT_MAXTTL    297
 #define LOPT_NO_REBIND 298
 #define LOPT_LOC_REBND 299
+#define LOPT_DNSOUT_IF 300
 
 #ifdef HAVE_GETOPT_LONG
 static const struct option opts[] =  
@@ -137,6 +138,7 @@
     { "domain", 1, 0, 's' },
     { "domain-suffix", 1, 0, 's' },
     { "interface", 1, 0, 'i' },
+    { "dnsout-interface", 1, 0, LOPT_DNSOUT_IF },
     { "listen-address", 1, 0, 'a' },
     { "bogus-priv", 0, 0, 'b' },
     { "bogus-nxdomain", 1, 0, 'B' },
@@ -257,6 +259,7 @@
   { 'h', OPT_NO_HOSTS, NULL, gettext_noop("Do NOT load %s file."), HOSTSFILE },
   { 'H', ARG_DUP, "path", gettext_noop("Specify a hosts file to be read in addition to %s."), HOSTSFILE },
   { 'i', ARG_DUP, "interface", gettext_noop("Specify interface(s) to listen on."), NULL },
+  { LOPT_DNSOUT_IF, ARG_DUP, "dnsout-interface", gettext_noop("Specify which interface(s) to use for dns request."), NULL },
   { 'I', ARG_DUP, "int", gettext_noop("Specify interface(s) NOT to listen on.") , NULL },
   { 'j', ARG_DUP, "set:<tag>,<class>", gettext_noop("Map DHCP user class to tag."), NULL },
   { LOPT_CIRCUIT, ARG_DUP, "set:<tag>,<circuit>", gettext_noop("Map RFC3046 circuit-id to tag."), NULL },
@@ -1362,6 +1365,20 @@
 	arg = comma;
       } while (arg);
       break;
+
+    case LOPT_DNSOUT_IF: /*--dnsout-interface */
+      do {
+          struct iname *new = opt_malloc(sizeof (struct iname));
+          memset(new, 0, sizeof (*new));
+          comma = split(arg);
+          new->next = daemon->dnsout_names;
+          daemon->dnsout_names = new;
+          /* new->name may be NULL if someone does
+           * "interface=" to disable all interfaces except loop. */
+          new->name = opt_string_alloc(arg);
+          arg = comma;
+      } while (arg);
+      break;
       
     case 'I':  /* --except-interface */
     case '2':  /* --no-dhcp-interface */
