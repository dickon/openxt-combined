diff -ru curl-7.19.7.orig/lib/http_ntlm.c curl-7.19.7/lib/http_ntlm.c
--- curl-7.19.7.orig/lib/http_ntlm.c	2010-11-02 14:40:30.990791426 +0000
+++ curl-7.19.7/lib/http_ntlm.c	2010-11-04 16:20:20.534896156 +0000
@@ -32,6 +32,17 @@
 
 */
 
+/* NTLMv2 support by David Halls (david.halls@citrix.com).
+
+   NTLMv2 details:
+
+   http://davenport.sourceforge.net/ntlm.html
+
+   I also looked at the following implementation:
+
+   http://rubyforge.org/projects/rubyntlm
+*/
+
 #ifndef CURL_DISABLE_HTTP
 #ifdef USE_NTLM
 
@@ -125,6 +136,9 @@
    message, requires USE_NTRESPONSES. */
 #define USE_NTLM2SESSION 1
 
+/* Define this to use NTLMv2 in the type-3 message */
+#define USE_NTLMV2 1
+
 #ifndef USE_WINDOWS_SSPI
 /* this function converts from the little endian format used in the incoming
    package to whatever endian format we're using natively */
@@ -273,15 +287,14 @@
 
       ntlm->state = NTLMSTATE_TYPE2; /* we got a type-2 */
 
-#ifdef USE_WINDOWS_SSPI
-      ntlm->type_2 = malloc(size+1);
+      ntlm->type_2 = malloc(size);
       if(ntlm->type_2 == NULL) {
         free(buffer);
         return CURLE_OUT_OF_MEMORY;
       }
       ntlm->n_type_2 = size;
       memcpy(ntlm->type_2, buffer, size);
-#else
+#ifndef USE_WINDOWS_SSPI
       ntlm->flags = 0;
 
       if((size < 32) ||
@@ -386,7 +399,7 @@
   setup_des_key(keys+14, DESKEY(ks));
   DES_ecb_encrypt((DES_cblock*) plaintext, (DES_cblock*) (results+16),
                   DESKEY(ks), DES_ENCRYPT);
-#elif USE_GNUTLS
+#elif defined(USE_GNUTLS)
   gcry_cipher_hd_t des;
 
   gcry_cipher_open(&des, GCRY_CIPHER_DES, GCRY_CIPHER_MODE_ECB, 0);
@@ -447,7 +460,7 @@
     setup_des_key(pw+7, DESKEY(ks));
     DES_ecb_encrypt((DES_cblock *)magic, (DES_cblock *)(lmbuffer+8),
                     DESKEY(ks), DES_ENCRYPT);
-#elif USE_GNUTLS
+#elif defined(USE_GNUTLS)
     gcry_cipher_hd_t des;
 
     gcry_cipher_open(&des, GCRY_CIPHER_DES, GCRY_CIPHER_MODE_ECB, 0);
@@ -535,7 +548,7 @@
     MD4_Init(&MD4pw);
     MD4_Update(&MD4pw, pw, 2*len);
     MD4_Final(ntbuffer, &MD4pw);
-#elif USE_GNUTLS
+#elif defined(USE_GNUTLS)
     gcry_md_hd_t MD4pw;
     gcry_md_open(&MD4pw, GCRY_MD_MD4, 0);
     gcry_md_write(MD4pw, pw, 2*len);
@@ -576,6 +589,17 @@
   }
 }
 
+#else
+
+static void
+ntlm_cleanup(struct ntlmdata *ntlm)
+{
+  if(ntlm->type_2) {
+    free(ntlm->type_2);
+    ntlm->type_2 = NULL;
+  }
+}
+
 #endif
 
 #define SHORTPAIR(x) ((x) & 0xff), (((x) >> 8) & 0xff)
@@ -598,8 +622,7 @@
 #endif
   size_t size;
   char *base64=NULL;
-  unsigned char ntlmbuf[1024]; /* enough, unless the user+host+domain is very
-                                  long */
+  unsigned char ntlmbuf[1024 * 16]; /* enough, unless the user+host+domain or target info is very long */
 
   /* point to the address of the pointer that holds the string to sent to the
      server, which is for a plain host or for a HTTP proxy */
@@ -737,6 +760,7 @@
     size = buf.cbBuffer;
   }
 #else
+    ntlm_cleanup(ntlm);
     hostoff = 0;
     domoff = hostoff + hostlen; /* This is 0: remember that host and domain
                                    are empty */
@@ -891,7 +915,8 @@
     unsigned char lmresp[24]; /* fixed-size */
 #if USE_NTRESPONSES
     int ntrespoff;
-    unsigned char ntresp[24]; /* fixed-size */
+    unsigned char ntresp[12 * 1024]; /* has to hold target info for ntlmv2 */
+    unsigned long ntlen = 24;
 #endif
     size_t useroff;
     const char *user;
@@ -925,6 +950,210 @@
       hostlen = strlen(host);
     }
 
+#if USE_NTLMV2
+    /* We don't support NTLMv2 if we don't have USE_NTRESPONSES */
+    if ((ntlm->n_type_2 >= 48) && (ntlm->flags & NTLMFLAG_NEGOTIATE_TARGET_INFO))
+    {
+        unsigned char *buffer = ntlm->type_2;
+        unsigned char *bufferend = buffer + ntlm->n_type_2;
+        unsigned char nthash[0x18];
+        unsigned char nthash2[16];
+        unsigned char client_challenge[8];
+        unsigned long tilen;
+        unsigned char *ti;
+        unsigned char blob[32] = {0};
+        unsigned long i;
+        uint64_t ts;
+
+        /* blob is:
+
+           0: 01010000 (signature)
+           4: 00000000 (reserved)
+           8: timestamp (64 bits, little endian)
+           16: client challenge (8 bytes)
+           24: 00000000 (unknown)
+           28: target info
+           28+tilen: 00000000 (unknown)
+           32+tilen
+
+           => 32 bytes plus target info size */
+
+        /* get target info */
+
+        tilen = buffer[40] + (buffer[41] << 8);
+        ti = &buffer[buffer[44] + (buffer[45] << 8) + (buffer[46] << 16) + (buffer[47] << 24)];
+
+        /* check target info doesn't finish outside buffer */
+
+        if ((ti + tilen) > bufferend)
+        {
+            return CURLNTLM_BAD;
+        }
+        
+        /* ntlmv2 response needs space for hash and blob */
+
+        ntlen = 16 + 32 + tilen;
+
+        if (ntlen > sizeof(ntresp))
+        {
+            failf(conn->data, "target info too big");
+            return CURLE_OUT_OF_MEMORY;
+        }
+
+        /* make nt hash */
+
+        if (mk_nt_hash(conn->data, passwdp, nthash) == CURLE_OUT_OF_MEMORY)
+        {
+            return CURLE_OUT_OF_MEMORY;
+        }
+
+        /* if no domain in user string, use target supplied by server */
+
+        if (domlen <= 0)
+        {
+            domain = &buffer[buffer[16] + (buffer[17] << 8) + (buffer[18] << 16) + (buffer[19] << 24)];
+            domlen = buffer[12] + (buffer[13] << 8);
+
+            /* check domain doesn't finish outside buffer */
+
+            if ((domain + domlen) > (const char *) bufferend)
+            {
+                return CURLNTLM_BAD;
+            }
+        }
+
+#ifdef USE_SSLEAY
+        unsigned char c;
+        HMAC_CTX ctx;
+        HMAC_Init(&ctx, nthash, 16, EVP_md5());
+
+        /* convert user to uppercase unicode and hash */
+
+        for (i = 0; i < userlen; i++)
+        {
+            c = toupper(user[i]);
+            HMAC_Update(&ctx, &c, 1);
+            c = '\0';
+            HMAC_Update(&ctx, &c, 1);
+        }
+
+        /* convert domain to uppercase unicode and hash */
+
+        for (i = 0; i < domlen; i++)
+        {
+            c = toupper(domain[i]);
+            HMAC_Update(&ctx, &c, 1);
+            c = '\0';
+            HMAC_Update(&ctx, &c, 1);
+        }
+
+        /* calculate ntlm v2 hash */
+
+        HMAC_Final(&ctx, nthash2, NULL);
+
+        HMAC_CTX_cleanup(&ctx);
+
+        /* generate random client challenge */
+
+        Curl_ossl_seed(conn->data); /* Initiate the seed if not already done */
+        RAND_bytes(client_challenge, 8);
+
+        /* make lmv2 response */
+
+        HMAC_Init(&ctx, nthash2, 16, EVP_md5());
+        HMAC_Update(&ctx, &buffer[24], 8); /* server challenge */
+        HMAC_Update(&ctx, client_challenge, 8); /* client challenge */
+        HMAC_Final(&ctx, lmresp, NULL);
+        HMAC_CTX_cleanup(&ctx);
+#elif defined(USE_GNUTLS)
+        gcry_md_hd_t ctx;
+        gcry_md_open(&ctx, GCRY_MD_MD5, GCRY_MD_FLAG_HMAC);
+        gcry_md_setkey(ctx, nthash, 16);
+
+        /* convert user to uppercase unicode and hash */
+
+        for (i = 0; i < userlen; i++)
+        {
+            gcry_md_putc(ctx, toupper(user[i]));
+            gcry_md_putc(ctx, '\0');
+        }
+
+        /* convert domain to uppercase unicode and hash */
+
+        for (i = 0; i < domlen; i++)
+        {
+            gcry_md_putc(ctx, toupper(domain[i]));
+            gcry_md_putc(ctx, '\0');
+        }
+
+        /* calculate ntlm v2 hash */
+
+        memcpy(nthash2, gcry_md_read(ctx, 0), 16);
+
+        /* generate random client challenge */
+
+        Curl_gtls_seed(conn->data); /* Initiate the seed if not already done */
+        gcry_randomize(client_challenge, 8, GCRY_STRONG_RANDOM);
+
+        /* make lmv2 response */
+
+        gcry_md_reset(ctx);
+        gcry_md_setkey(ctx, nthash2, 16);
+        gcry_md_write(ctx, &buffer[24], 8); /* server challenge */
+        gcry_md_write(ctx, client_challenge, 8); /* client challenge */
+        memcpy(lmresp, gcry_md_read(ctx, 0), 16);
+#endif
+
+        /* append client challenge */
+
+        memcpy(&lmresp[16], client_challenge, 8);
+
+        /* signature */
+
+        blob[0] = 0x01;
+        blob[1] = 0x01;
+
+        /* timestamp */
+
+        ts = (time(NULL) + 11644473600ULL) * 10000000L;
+        
+        blob[8] = ts & 0xff;
+        blob[9] = (ts >> 8) & 0xff;
+        blob[10] = (ts >> 16) & 0xff;
+        blob[11] = (ts >> 24) & 0xff;
+
+        /* client challenge */
+
+        memcpy(&blob[16], client_challenge, 8);
+
+#ifdef USE_SSLEAY
+        HMAC_Init(&ctx, nthash2, 16, EVP_md5());
+        HMAC_Update(&ctx, &buffer[24], 8); /* server challenge */
+        HMAC_Update(&ctx, blob, 28); /* blob up to target info */
+        HMAC_Update(&ctx, ti, tilen); /* target info */
+        HMAC_Update(&ctx, &blob[28], 4); /* blob after target info */
+        HMAC_Final(&ctx, ntresp, NULL);
+        HMAC_CTX_cleanup(&ctx);
+#elif defined(USE_GNUTLS)
+        gcry_md_reset(ctx);
+        gcry_md_setkey(ctx, nthash2, 16);
+        gcry_md_write(ctx, &buffer[24], 8); /* server challenge */
+        gcry_md_write(ctx, blob, 28); /* blob up to target info */
+        gcry_md_write(ctx, ti, tilen); /* target info */
+        gcry_md_write(ctx, &blob[28], 4); /* blob after target info */
+        memcpy(ntresp, gcry_md_read(ctx, 0), 16);
+        gcry_md_close(ctx);
+#endif
+        /* append blob */
+
+        memcpy(&ntresp[16], blob, 28);
+        memcpy(&ntresp[16 + 28], ti, tilen);
+        memcpy(&ntresp[16 + 28 + tilen], &blob[28], 4);
+
+        /* end of NTLMv2 code */
+    }
+    else
+#endif
 #if USE_NTLM2SESSION
     /* We don't support NTLM2 if we don't have USE_NTRESPONSES */
     if(ntlm->flags & NTLMFLAG_NEGOTIATE_NTLM2_KEY) {
@@ -938,7 +1167,7 @@
       MD5_CTX MD5pw;
       Curl_ossl_seed(conn->data); /* Initiate the seed if not already done */
       RAND_bytes(entropy,8);
-#elif USE_GNUTLS
+#elif defined(USE_GNUTLS)
       gcry_md_hd_t MD5pw;
       Curl_gtls_seed(conn->data); /* Initiate the seed if not already done */
       gcry_randomize(entropy, 8, GCRY_STRONG_RANDOM);
@@ -957,7 +1186,7 @@
       MD5_Init(&MD5pw);
       MD5_Update(&MD5pw, tmp, 16);
       MD5_Final(md5sum, &MD5pw);
-#elif USE_GNUTLS
+#elif defined(USE_GNUTLS)
       gcry_md_open(&MD5pw, GCRY_MD_MD5, 0);
       gcry_md_write(MD5pw, tmp, MD5_DIGEST_LENGTH);
       memcpy(md5sum, gcry_md_read (MD5pw, 0), MD5_DIGEST_LENGTH);
@@ -998,7 +1227,7 @@
     lmrespoff = 64; /* size of the message header */
 #if USE_NTRESPONSES
     ntrespoff = lmrespoff + 0x18;
-    domoff = ntrespoff + 0x18;
+    domoff = ntrespoff + ntlen;
 #else
     domoff = lmrespoff + 0x18;
 #endif
@@ -1064,8 +1293,8 @@
                     0x0, 0x0,
 
 #if USE_NTRESPONSES
-                    SHORTPAIR(0x18),  /* NT-response length, twice */
-                    SHORTPAIR(0x18),
+                    SHORTPAIR(ntlen),  /* NT-response length, twice */
+                    SHORTPAIR(ntlen),
                     SHORTPAIR(ntrespoff),
                     0x0, 0x0,
 #else
@@ -1110,15 +1339,15 @@
     });
 
 #if USE_NTRESPONSES
-    if(size < (sizeof(ntlmbuf) - 0x18)) {
+    if(size < (sizeof(ntlmbuf) - ntlen)) {
       DEBUGASSERT(size == (size_t)ntrespoff);
-      memcpy(&ntlmbuf[size], ntresp, 0x18);
-      size += 0x18;
+      memcpy(&ntlmbuf[size], ntresp, ntlen);
+      size += ntlen;
     }
 
     DEBUG_OUT({
         fprintf(stderr, "\n                  ntresp=");
-        print_hex(stderr, (char *)&ntlmbuf[ntrespoff], 0x18);
+        print_hex(stderr, (char *)&ntlmbuf[ntrespoff], ntlen);
     });
 
 #endif
@@ -1139,7 +1368,9 @@
     }
 
     DEBUGASSERT(size == domoff);
-    memcpy(&ntlmbuf[size], domain, domlen);
+    /* Make sure the domain is upper case. NTLMv2 fails if it's not
+       because it doesn't match what we hash */
+    Curl_strntoupper(&ntlmbuf[size], domain, domlen);
     size += domlen;
 
     DEBUGASSERT(size == useroff);
@@ -1159,6 +1390,8 @@
     }
 #endif /* CURL_DOES_CONVERSIONS */
 
+    ntlm_cleanup(ntlm);
+
 #endif
 
     /* convert the binary blob into base64 */
@@ -1202,7 +1435,8 @@
   ntlm_sspi_cleanup(&conn->ntlm);
   ntlm_sspi_cleanup(&conn->proxyntlm);
 #else
-  (void)conn;
+  ntlm_cleanup(&conn->ntlm);
+  ntlm_cleanup(&conn->proxyntlm);
 #endif
 }
 
diff -ru curl-7.19.7.orig/lib/urldata.h curl-7.19.7/lib/urldata.h
--- curl-7.19.7.orig/lib/urldata.h	2010-11-02 14:40:30.994790999 +0000
+++ curl-7.19.7/lib/urldata.h	2010-11-02 15:28:32.822043506 +0000
@@ -295,12 +295,12 @@
   SEC_WINNT_AUTH_IDENTITY identity;
   SEC_WINNT_AUTH_IDENTITY *p_identity;
   int has_handles;
-  void *type_2;
-  int n_type_2;
 #else
   unsigned int flags;
   unsigned char nonce[8];
 #endif
+  void *type_2;
+  int n_type_2;
 };
 
 #ifdef HAVE_GSSAPI
