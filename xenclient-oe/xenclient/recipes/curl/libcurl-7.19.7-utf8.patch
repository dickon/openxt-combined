--- curl-7.19.7.orig_patched/lib/http_ntlm.c	2011-07-21 17:57:02.374411874 +0100
+++ curl-7.19.7/lib/http_ntlm.c	2011-07-25 20:07:49.089408662 +0100
@@ -54,6 +54,8 @@
 #include <stdarg.h>
 #include <stdlib.h>
 #include <ctype.h>
+#include <wctype.h>
+#include <locale.h>
 
 #ifdef HAVE_UNISTD_H
 #include <unistd.h>
@@ -479,14 +481,55 @@
   }
 
 #if USE_NTRESPONSES
-static void ascii_to_unicode_le(unsigned char *dest, const char *src,
-                               size_t srclen)
+static size_t utf8_to_utf16le(unsigned char *dest,
+                              const unsigned char *src,
+                              size_t len)
 {
-  size_t i;
-  for (i=0; i<srclen; i++) {
-    dest[2*i]   = (unsigned char)src[i];
-    dest[2*i+1] =   '\0';
+  size_t read = 0, write = 0;
+  unsigned char c, c2, c3;
+  unsigned short v;
+
+  while ((read < len) && (write < (len*2 - 1)))
+  {
+    c = src[read++];
+
+    switch (c >> 4)
+    {
+      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
+        // 0xxxxxxx
+        v = c;
+        break;
+
+      case 12: case 13:
+        // 110x xxxx  10xx xxxx
+        if (read >= len)
+        {
+          return write;
+        }
+        c2 = src[read++];
+        v = ((c & 0x1f) << 6) | (c2 & 0x3f);
+        break;
+
+      case 14:
+        // 1110 xxxx  10xx xxxx  10xx xxxx
+        if (read >= (len-1))
+        {
+          return write;
+        }
+        c2 = src[read++];
+        c3 = src[read++];
+        v = ((c & 0x0f) << 12) | ((c2 & 0x3f) << 6) | ((c3 & 0x3f) << 0);
+        break;
+
+      default:
+        return write;
+    }
+
+    dest[write++] = v & 0xff;
+    dest[write++] = v >> 8;
   }
+
+  return write;
 }
 
 /*
@@ -528,7 +571,7 @@
   if(!pw)
     return CURLE_OUT_OF_MEMORY;
 
-  ascii_to_unicode_le(pw, password, len);
+  size_t ulen = utf8_to_utf16le(pw, password, len);
 
 #ifdef CURL_DOES_CONVERSIONS
   /*
@@ -536,7 +579,7 @@
    * password in the network encoding not the host encoding.
    */
   if(data)
-    Curl_convert_to_network(data, (char *)pw, len*2);
+    Curl_convert_to_network(data, (char *)pw, ulen);
 #else
   (void)data;
 #endif
@@ -546,12 +589,12 @@
 #ifdef USE_SSLEAY
     MD4_CTX MD4pw;
     MD4_Init(&MD4pw);
-    MD4_Update(&MD4pw, pw, 2*len);
+    MD4_Update(&MD4pw, pw, ulen);
     MD4_Final(ntbuffer, &MD4pw);
 #elif defined(USE_GNUTLS)
     gcry_md_hd_t MD4pw;
     gcry_md_open(&MD4pw, GCRY_MD_MD4, 0);
-    gcry_md_write(MD4pw, pw, 2*len);
+    gcry_md_write(MD4pw, pw, ulen);
     memcpy (ntbuffer, gcry_md_read (MD4pw, 0), MD4_DIGEST_LENGTH);
     gcry_md_close(MD4pw);
 #endif
@@ -1022,31 +1065,161 @@
             }
         }
 
+        unsigned char c, c2, c3;
+        unsigned short v;
+
+        /* temporarily switch the locale as per http://www.gnu.org/s/libc/manual/html_node/Setting-the-Locale.html#Setting-the-Locale */
+
+        char *old_locale = setlocale(LC_ALL, NULL),
+             *saved_locale = NULL;
+
+        if (old_locale != NULL)
+        {
+          /* Copy the name so it won't be clobbered by setlocale. */
+          saved_locale = strdup(old_locale);
+
+          if (saved_locale == NULL)
+          {
+            return CURLE_OUT_OF_MEMORY;
+          }
+        }
+
+        /* Now change the locale so towupper works (can be any UTF locale). */
+        setlocale(LC_ALL, "en_US.UTF-8");
+
 #ifdef USE_SSLEAY
-        unsigned char c;
         HMAC_CTX ctx;
         HMAC_Init(&ctx, nthash, 16, EVP_md5());
-
+#elif defined(USE_GNUTLS)
+        gcry_md_hd_t ctx;
+        gcry_md_open(&ctx, GCRY_MD_MD5, GCRY_MD_FLAG_HMAC);
+        gcry_md_setkey(ctx, nthash, 16);
+#endif
         /* convert user to uppercase unicode and hash */
 
-        for (i = 0; i < userlen; i++)
+        i = 0;
+
+        while (i < userlen)
         {
-            c = toupper(user[i]);
-            HMAC_Update(&ctx, &c, 1);
-            c = '\0';
-            HMAC_Update(&ctx, &c, 1);
+          c = user[i++];
+
+          switch (c >> 4)
+          {
+            case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
+              // 0xxxxxxx
+              v = c;
+              break;
+
+            case 12: case 13:
+              // 110x xxxx  10xx xxxx
+              if (i >= userlen)
+              {
+                i = userlen;
+                continue;
+              }
+              c2 = user[i++];
+              v = ((c & 0x1f) << 6) | (c2 & 0x3f);
+              break;
+
+            case 14:
+              // 1110 xxxx  10xx xxxx  10xx xxxx
+              if (i >= (userlen-1))
+              {
+                i = userlen;
+                continue;
+              }
+              c2 = user[i++];
+              c3 = user[i++];
+              v = ((c & 0x0f) << 12) | ((c2 & 0x3f) << 6) | ((c3 & 0x3f) << 0);
+              break;
+
+            default:
+              i = userlen;
+              continue;
+          }
+
+          v = towupper(v);
+
+          c = v & 0xff;
+#ifdef USE_SSLEAY
+          HMAC_Update(&ctx, &c, 1);
+#elif defined(USE_GNUTLS)
+          gcry_md_putc(ctx, c);
+#endif
+
+          c = v >> 8;
+#ifdef USE_SSLEAY
+          HMAC_Update(&ctx, &c, 1);
+#elif defined(USE_GNUTLS)
+          gcry_md_putc(ctx, c);
+#endif
         }
 
         /* convert domain to uppercase unicode and hash */
 
-        for (i = 0; i < domlen; i++)
+        i = 0;
+
+        while (i < domlen)
         {
-            c = toupper(domain[i]);
-            HMAC_Update(&ctx, &c, 1);
-            c = '\0';
-            HMAC_Update(&ctx, &c, 1);
+          c = domain[i++];
+
+          switch (c >> 4)
+          {
+            case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
+              // 0xxxxxxx
+              v = c;
+              break;
+
+            case 12: case 13:
+              // 110x xxxx  10xx xxxx
+              if (i >= domlen)
+              {
+                i = domlen;
+                continue;
+              }
+              c2 = domain[i++];
+              v = ((c & 0x1f) << 6) | (c2 & 0x3f);
+              break;
+
+            case 14:
+              // 1110 xxxx  10xx xxxx  10xx xxxx
+              if (i >= (domlen-1))
+              {
+                i = domlen;
+                continue;
+              }
+              c2 = domain[i++];
+              c3 = domain[i++];
+              v = ((c & 0x0f) << 12) | ((c2 & 0x3f) << 6) | ((c3 & 0x3f) << 0);
+              break;
+
+            default:
+              i = domlen;
+              continue;
+          }
+
+          v = towupper(v);
+
+          c = v & 0xff;
+#ifdef USE_SSLEAY
+          HMAC_Update(&ctx, &c, 1);
+#elif defined(USE_GNUTLS)
+          gcry_md_putc(ctx, c);
+#endif
+
+          c = v >> 8;
+#ifdef USE_SSLEAY
+          HMAC_Update(&ctx, &c, 1);
+#elif defined(USE_GNUTLS)
+          gcry_md_putc(ctx, c);
+#endif
         }
 
+        /* Restore the original locale. */
+        setlocale(LC_ALL, saved_locale);
+        free(saved_locale);
+
+#ifdef USE_SSLEAY
         /* calculate ntlm v2 hash */
 
         HMAC_Final(&ctx, nthash2, NULL);
@@ -1066,26 +1239,6 @@
         HMAC_Final(&ctx, lmresp, NULL);
         HMAC_CTX_cleanup(&ctx);
 #elif defined(USE_GNUTLS)
-        gcry_md_hd_t ctx;
-        gcry_md_open(&ctx, GCRY_MD_MD5, GCRY_MD_FLAG_HMAC);
-        gcry_md_setkey(ctx, nthash, 16);
-
-        /* convert user to uppercase unicode and hash */
-
-        for (i = 0; i < userlen; i++)
-        {
-            gcry_md_putc(ctx, toupper(user[i]));
-            gcry_md_putc(ctx, '\0');
-        }
-
-        /* convert domain to uppercase unicode and hash */
-
-        for (i = 0; i < domlen; i++)
-        {
-            gcry_md_putc(ctx, toupper(domain[i]));
-            gcry_md_putc(ctx, '\0');
-        }
-
         /* calculate ntlm v2 hash */
 
         memcpy(nthash2, gcry_md_read(ctx, 0), 16);
