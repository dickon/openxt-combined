Index: cryptsetup-1.1.0/lib/libcryptsetup.h
===================================================================
--- cryptsetup-1.1.0.orig/lib/libcryptsetup.h	2009-11-14 17:34:23.000000000 +0000
+++ cryptsetup-1.1.0/lib/libcryptsetup.h	2010-02-09 03:07:28.000000000 +0000
@@ -568,6 +568,7 @@
 int crypt_luksUUID(struct crypt_options *options);
 int crypt_isLuks(struct crypt_options *options);
 int crypt_luksDump(struct crypt_options *options);
+int crypt_luksCheckKey(struct crypt_options *options);
 
 void crypt_put_options(struct crypt_options *options);
 
Index: cryptsetup-1.1.0/lib/setup.c
===================================================================
--- cryptsetup-1.1.0.orig/lib/setup.c	2010-01-09 23:13:18.000000000 +0000
+++ cryptsetup-1.1.0/lib/setup.c	2010-02-09 03:19:13.000000000 +0000
@@ -948,6 +948,32 @@
 	return 0;
 }
 
+int crypt_luksCheckKey(struct crypt_options *options)
+{
+	struct crypt_device *cd = NULL;
+	int r;
+
+	if (!options->device)
+		return -EINVAL;
+
+	r = _crypt_init(&cd, CRYPT_LUKS1, options, 1, 1);
+	if (r)
+		return r;
+
+	if (options->key_file)
+		r = crypt_keyslot_check_by_keyfile(
+			cd, options->device, options->key_slot,
+			options->key_file, options->key_size);
+	else
+		r = crypt_keyslot_check_by_passphrase(
+			cd, options->device, options->key_slot,
+			options->passphrase,
+			options->passphrase ? strlen(options->passphrase) : 0);
+
+	crypt_free(cd);
+	return (r < 0) ? r : 0;
+}
+
 void crypt_get_error(char *buf, size_t size)
 {
 	const char *error = get_error();
@@ -1820,6 +1846,76 @@
 	return r;
 }
 
+// key verify
+int crypt_keyslot_check_by_passphrase(struct crypt_device *cd,
+	const char *device,
+	int keyslot,
+	const char *passphrase,
+	size_t passphrase_size)
+{
+	crypt_status_info ci;
+	struct luks_masterkey *mk = NULL;
+	char *prompt = NULL;
+	int r;
+
+	log_dbg("Checking access to volume %s [keyslot %d] using %spassphrase.",
+		device ?: "",
+		keyslot, passphrase ? "" : "[none] ");
+
+	if(asprintf(&prompt, _("Enter passphrase for %s: "), cd->device) < 0)
+		return -ENOMEM;
+
+	/* provided passphrase, do not retry */
+	if (passphrase) {
+		r = LUKS_open_key_with_hdr(cd->device, keyslot, passphrase,
+					   passphrase_size, &cd->hdr, &mk, cd);
+	} else
+		r = volume_key_by_terminal_passphrase(cd, keyslot, &mk);
+
+	LUKS_dealloc_masterkey(mk);
+	free(prompt);
+
+	return r;
+}
+
+int crypt_keyslot_check_by_keyfile(struct crypt_device *cd,
+	const char *device,
+	int keyslot,
+	const char *keyfile,
+	size_t keyfile_size)
+{
+	crypt_status_info ci;
+	struct luks_masterkey *mk = NULL;
+	char *passphrase_read = NULL;
+	unsigned int passphrase_size_read;
+	int r;
+
+	log_dbg("Checking access to volume %s [keyslot %d] using keyfile %s.",
+		device, keyslot, keyfile ?: "[none]");
+
+	if (!isLUKS(cd->type)) {
+		log_err(cd, _("This operation is supported only for LUKS device.\n"));
+		return -EINVAL;
+	}
+
+	if (!keyfile)
+		return -EINVAL;
+
+	key_from_file(cd, _("Enter passphrase: "), &passphrase_read,
+		      &passphrase_size_read, keyfile, keyfile_size);
+	if(!passphrase_read)
+		r = -EINVAL;
+	else {
+		r = LUKS_open_key_with_hdr(cd->device, keyslot, passphrase_read,
+					   passphrase_size_read, &cd->hdr, &mk, cd);
+		safe_free(passphrase_read);
+	}
+
+	LUKS_dealloc_masterkey(mk);
+
+	return r;
+}
+
 // misc helper functions
 int crypt_volume_key_get(struct crypt_device *cd,
 	int keyslot,
Index: cryptsetup-1.1.0/src/cryptsetup.c
===================================================================
--- cryptsetup-1.1.0.orig/src/cryptsetup.c	2010-01-15 14:24:52.000000000 +0000
+++ cryptsetup-1.1.0/src/cryptsetup.c	2010-02-09 03:19:11.000000000 +0000
@@ -48,6 +48,7 @@
 static int action_luksFormat(int arg);
 static int action_luksOpen(int arg);
 static int action_luksAddKey(int arg);
+static int action_luksCheckKey(int arg);
 static int action_luksDelKey(int arg);
 static int action_luksKillSlot(int arg);
 static int action_luksRemoveKey(int arg);
@@ -75,6 +76,7 @@
 	{ "luksFormat", action_luksFormat,	0, 1, 1, N_("<device> [<new key file>]"), N_("formats a LUKS device") },
 	{ "luksOpen",	action_luksOpen,	0, 2, 1, N_("<device> <name> "), N_("open LUKS device as mapping <name>") },
 	{ "luksAddKey",	action_luksAddKey,	0, 1, 1, N_("<device> [<new key file>]"), N_("add key to LUKS device") },
+	{ "luksCheckKey",	action_luksCheckKey, 0, 1, N_("<device>"), N_("check key can open LUKS device") },
 	{ "luksRemoveKey",action_luksRemoveKey,	0, 1, 1, N_("<device> [<key file>]"), N_("removes supplied key or key file from LUKS device") },
 	{ "luksKillSlot",  action_luksKillSlot, 0, 2, 1, N_("<device> <key slot>"), N_("wipes key with number <key slot> from LUKS device") },
 	{ "luksUUID",	action_luksUUID,	0, 1, 0, N_("<device>"), N_("print UUID of LUKS device") },
@@ -615,6 +617,25 @@
 	return r;
 }
 
+static int action_luksCheckKey(int arg)
+{
+	struct crypt_options options = {
+		.device = action_argv[0],
+		.key_file = opt_key_file,
+		.key_slot = opt_key_slot,
+		.timeout = opt_timeout,
+		.tries = opt_tries,
+		.icb = &cmd_icb,
+	};
+	int r;
+
+	opt_verbose = 1;
+        options.flags = CRYPT_FLAG_NON_EXCLUSIVE_ACCESS;
+	r = crypt_luksCheckKey(&options);
+	show_status(-r);
+	return r;
+}
+
 static void usage(poptContext popt_context, int exitcode,
                   const char *error, const char *more)
 {
Index: cryptsetup-1.1.0/lib/libcryptsetup.sym
===================================================================
--- cryptsetup-1.1.0.orig/lib/libcryptsetup.sym	2009-09-30 14:02:46.000000000 +0000
+++ cryptsetup-1.1.0/lib/libcryptsetup.sym	2010-02-09 03:07:28.000000000 +0000
@@ -55,6 +55,7 @@
 		crypt_luksKillSlot;
 		crypt_luksRemoveKey;
 		crypt_luksAddKey;
+		crypt_luksCheckKey;
 		crypt_luksUUID;
 		crypt_isLuks;
 		crypt_luksDump;
