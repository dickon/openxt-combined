<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN" "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node name="/version1/vm" xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0">
  <interface name="com.citrix.xenclient.api.vm">
    <property name="list_vms" type="ao" access="read">
      <tp:docstring>List each VM present: A list of dicts with few
      critical properties filled for each VM, including VM state,
      domain ID (if running), uuid etc.</tp:docstring>
      <!-- Or should this be a method?  If we keep it as a property,
           changing the name to just "vms" or "list-of-vms" is
           probably a good idea.-->
    </property>
    <method name="find_vm_by_uuid">
      <tp:docstring>Returns the object path to the VM with the given UUID, or raises an error.</tp:docstring>
      <arg name="uuid" type="s" direction="in"/>
      <arg name="obj_path" type="o" direction="out"/>
    </method>
    <method name="list_templates">
      <tp:docstring>List the templates available for creating new VMs.</tp:docstring>
      <arg name="templates" type="as" direction="out"/>
    </method>
    <method name="create_vm">
      <tp:docstring>Create a new VM.</tp:docstring>
      <arg name="path" type="o" direction="out"/>
    </method>

    <!-- Can't implement those at the moment: -->

    <!-- <property name="list_vm_image" type="as" access="read"> -->
    <!--   <tp:docstring>List of uuids of VM images.</tp:docstring> -->
    <!--   TODO: Does listing as uuids make sense?  Or should we rather list object paths? -->
    <!-- </property> -->
    <!-- <property name="list_wired_networks" type="as" access="read"/> -->
    <!-- <property name="list_cdroms" type="as" access="read"> -->
    <!--   <\!-\- TODO: What shall we list here, uuids or object paths? -\-> -->
    <!-- </property> -->

    <!-- Stuff specific to one VM comes here: -->

    <method name="get_name">
      <arg name="vm_uuid" type="s" direction="in"/>
      <arg name="name" type="s" direction="out"/>
    </method>
    <method name="set_name">
      <arg name="vm_uuid" type="s" direction="in"/>
      <arg name="name" type="s" direction="in"/>
    </method>

    <method name="get_description">
      <arg name="vm_uuid" type="s" direction="in"/>
      <arg name="description" type="s" direction="out"/>
    </method>
    <method name="set_description">
      <arg name="vm_uuid" type="s" direction="in"/>
      <arg name="description" type="s" direction="in"/>
    </method>

    <method name="get_icon">
      <tp:docstring>Read a byte array representing the VM icon image.</tp:docstring>
      <arg name="vm_uuid" type="s" direction="in"/>
      <arg name="icon" type="ay" direction="out"/>
    </method>

    <method name="add_disk">
      <tp:docstring>Add a new disk to VM.</tp:docstring>
      <arg name="vm_uuid" type="s" direction="in"/>
      <arg name="size" type="i" direction="in">
        <tp:docstring>Size in megabytes.</tp:docstring>
      </arg>
      <arg name="path" type="o" direction="out">
        <!-- TODO: Add rm_disk. -->
      </arg>
    </method>
    <method name="set_cdrom">
      <!-- TODO: Review argument name and type. Add documentation. -->
      <arg name="vm_uuid" type="s" direction="in"/>
      <arg name="cdrom" type="s" direction="in"/>
    </method>
    <!-- TODO: Consider adding get-cdrom -->
    <methode name="get_vcpus">
      <arg name="vm_uuid" type="s" direction="in"/>
      <arg name="vcpus" type="i" direction="out"/>
    </methode>
    <methode name="set_vcpus">
      <arg name="vm_uuid" type="s" direction="in"/>
      <arg name="vcpus" type="i" direction="in"/>
    </methode>
    <methode name="get_memory">
      <!-- Unit? -->
      <arg name="vm_uuid" type="s" direction="in"/>
      <arg name="memory" type="i" direction="out"/>
    </methode>
    <methode name="set_memory">
      <arg name="vm_uuid" type="s" direction="in"/>
      <arg name="memory" type="i" direction="in"/>
    </methode>
    <method name="get_wired_network">
      <arg name="vm_uuid" type="s" direction="in"/>
      <arg name="wired_network" type="s" direction="out"/>
    </method>
    <method name="set_wired_network">
      <arg name="vm_uuid" type="s" direction="in"/>
      <arg name="wired_network" type="s" direction="in"/>
    </method>
    <method name="get_has_tools">
      <arg name="vm_uuid" type="s" direction="in"/>
      <arg name="has_tools" type="b" direction="out"/>
    </method>
    <method name="get_autostart">
      <arg name="vm_uuid" type="s" direction="in"/>
      <arg name="autostart" type="b" direction="out"/>
    </method>
    <method name="set_autostart">
      <arg name="vm_uuid" type="s" direction="in"/>
      <arg name="autostart" type="b" direction="in"/>
    </method>
    <method name="switch">
      <arg name="vm_uuid" type="s" direction="in"/>
      <tp:docstring>Switch to a VM.</tp:docstring>
    </method>
    <method name="start">
      <arg name="vm_uuid" type="s" direction="in"/>
      <tp:docstring>Start the VM.</tp:docstring>
    </method>
    <method name="reboot">
      <arg name="vm_uuid" type="s" direction="in"/>
      <tp:docstring>Reboot the VM.</tp:docstring>
    </method>
    <method name="shutdown">
      <arg name="vm_uuid" type="s" direction="in"/>
      <tp:docstring>Shutdown the VM.</tp:docstring>
    </method>
    <method name="hibernate">
      <arg name="vm_uuid" type="s" direction="in"/>
      <tp:docstring>s4 the VM.</tp:docstring>
    </method>
  </interface>
</node>
